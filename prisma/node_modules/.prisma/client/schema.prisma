// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// Kullanıcı Modeli
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      Role     @default(WORKER)
  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  irrigationLogs        IrrigationLog[]
  ownedFields           FieldOwnership[]        @relation("UserOwnedFields") // Sahip olunan tarlalar
  assignedFields        FieldWorkerAssignment[] @relation("UserAssignedFields") // İşçi olarak atanan tarlalar
  inventoryOwnership    InventoryOwnership[]
  debtsAsCreditor       Debt[]                  @relation("DebtsGiven")
  debtsAsDebtor         Debt[]                  @relation("DebtsTaken")
  purchaseContributions PurchaseContributor[]
  receivedNotifications Notification[]          @relation("NotificationsReceived")
  sentNotifications     Notification[]          @relation("NotificationsSent")
  inventoryUsages       InventoryUsage[]
  processes             Process[]
  invoicesPurchased     Invoice[]               @relation("InvoicePurchaser")
  paymentsMade          PaymentHistory[]        @relation("PaymentsMade")
  paymentsReceived      PaymentHistory[]        @relation("PaymentsReceived")
  inventoryTransactions InventoryTransaction[]
  seasons               Season[]                @relation("SeasonCreator") // YENİ: Sezon oluşturucu ilişkisi
  purchaseApprovals     PurchaseApproval[] // YENİ: Alış onayları

  // YENİ: Ekipman ilişkileri
  equipmentOwnerships EquipmentOwnership[] // Sahip olunan ekipmanlar
  equipmentUsages     EquipmentUsage[] // Kullanılan ekipmanlar
  fieldOwnerExpenses  FieldOwnerExpense[] // Tarla sahibi giderleri
  wellAssignments     WorkerWellAssignment[] // İşçiye atanan kuyular

  // YENİ: Bildirim tercihleri
  notificationPreferences NotificationPreference?

  // Yeni eklenen sulama ilişkileri
  irrigationOwnerUsages          IrrigationOwnerUsage[]
  irrigationInventoryOwnerUsages IrrigationInventoryOwnerUsage[]
  irrigationOwnerSummaries       IrrigationOwnerSummary[] // Yeni ilişki eklendi

  // YENİ: Kuyu faturası dağıtımları (karşı ilişki)
  wellBillDistributions WellBillDistribution[]
}

// YENİ: Sezon Modeli
model Season {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String // Örn: "2023-2024 Kış Sezonu"
  startDate   DateTime
  endDate     DateTime
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // İlişkiler
  creator               User                   @relation("SeasonCreator", fields: [creatorId], references: [id])
  creatorId             String                 @db.ObjectId
  fields                Field[] // Tarlalar
  crops                 Crop[] // Ekinler
  purchases             Purchase[] // Alışlar
  inventoryTransactions InventoryTransaction[] // Envanter işlemleri
  processes             Process[] // İşlemler
  irrigationLogs        IrrigationLog[] // Sulama kayıtları

  // YENİ: Tarla giderleri
  fieldExpenses FieldExpense[]

  // YENİ: Bildirimler
  notifications Notification[] @relation("SeasonNotifications")
}

// Tarla Modeli
model Field {
  id                String                  @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  location          String
  size              Float
  coordinates       String?
  status            String
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  seasonId          String?                 @db.ObjectId
  season            Season?                 @relation(fields: [seasonId], references: [id])
  owners            FieldOwnership[]        @relation("FieldOwnerAssignments") // İlişki ismi eklendi
  workerAssignments FieldWorkerAssignment[] @relation("FieldWorkerAssignments")
  crops             Crop[]
  // wells             Well[]                @relation("FieldWells") // Kaldırıldı: Explicit join model kullanılacak
  fieldWells        FieldWell[] // Eklendi: Explicit join model ilişkisi
  // irrigationLogs    IrrigationLog[] // Eski model kaldırıldı, yenisi eklenecek
  processingLogs    ProcessingLog[]
  processCosts      ProcessCost[]           @relation("FieldProcessCosts") // İlişki ismi eklendi

  // İlişkiler
  // owners            FieldOwnership[]        @relation("FieldOwnerAssignments") // Tarla sahipleri
  // workerAssignments FieldWorkerAssignment[] @relation("FieldWorkerAssignments") // Tarla işçileri
  // crops             Crop[]
  // irrigationLogs    IrrigationLog[]
  // processingLogs    ProcessingLog[]
  // wells             Well[]                  // Tarla kuyuları - ilişki güncellendi
  inventoryUsages InventoryUsage[]
  processes       Process[]

  // YENİ: Tarla giderleri
  fieldExpenses FieldExpense[]

  // YENİ: Bildirimler
  notifications Notification[] @relation("FieldNotifications")

  // Yeni eklenen sulama ilişkileri
  irrigationFieldUsages IrrigationFieldUsage[]

  // YENİ: Kuyu faturası dağıtımları (karşı ilişki)
  wellBillDistributions WellBillDistribution[]
}

// Tarla Sahipliği Modeli
model FieldOwnership {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  percentage Float    @default(0) // YENİ: Sahiplik yüzdesi

  // İlişkiler
  field   Field  @relation("FieldOwnerAssignments", fields: [fieldId], references: [id])
  fieldId String @db.ObjectId
  user    User   @relation("UserOwnedFields", fields: [userId], references: [id])
  userId  String @db.ObjectId

  // YENİ: Tarla sahibi giderleri
  ownerExpenses FieldOwnerExpense[]

  @@unique([fieldId, userId])
}

// Tarla İşçi Atama Modeli
model FieldWorkerAssignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  field   Field  @relation("FieldWorkerAssignments", fields: [fieldId], references: [id])
  fieldId String @db.ObjectId
  user    User   @relation("UserAssignedFields", fields: [userId], references: [id])
  userId  String @db.ObjectId

  @@unique([fieldId, userId])
}

// YENİ: Field ve Well için Explicit Join Modeli
model FieldWell {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  field     Field    @relation(fields: [fieldId], references: [id])
  fieldId   String   @db.ObjectId
  well      Well     @relation(fields: [wellId], references: [id])
  wellId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([fieldId, wellId])
}

// YENİ: İşçi Kuyu Atama Modeli
model WorkerWellAssignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  worker   User   @relation(fields: [workerId], references: [id])
  workerId String @db.ObjectId
  well     Well   @relation(fields: [wellId], references: [id])
  wellId   String @db.ObjectId

  @@unique([workerId, wellId]) // Bir işçi bir kuyuya sadece bir kez atanabilir
}

// Kuyu modeli - güncellendi
model Well {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  depth      Float
  capacity   Float
  status     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  // fields    Field[]  @relation("FieldWells") // Kaldırıldı: Explicit join model kullanılacak
  fieldWells FieldWell[] // Eklendi: Explicit join model ilişkisi

  // İlişkiler
  // field   Field?  @relation(fields: [fieldId], references: [id])
  // fieldId String? @db.ObjectId // Kaldırıldı

  // YENİ: Bildirimler
  notifications Notification[] @relation("WellNotifications")

  // Yeni eklenen sulama ilişkileri
  irrigationLogs     IrrigationLog[]
  wellBillingPeriods WellBillingPeriod[]
  workerAssignments  WorkerWellAssignment[] // Kuyuya atanan işçiler
}

// Ürün modeli
model Crop {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  plantedDate DateTime
  harvestDate DateTime?
  status      CropStatus @default(GROWING)
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // YENİ: Sezon ilişkisi
  season   Season? @relation(fields: [seasonId], references: [id])
  seasonId String? @db.ObjectId

  // İlişkiler
  field   Field  @relation(fields: [fieldId], references: [id])
  fieldId String @db.ObjectId

  // YENİ: Bildirimler
  notifications Notification[] @relation("CropNotifications")
}

// Sulama kaydı modeli (Eski model kaldırıldı, bu yeni model)
// model IrrigationLog {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   date      DateTime
//   amount    Float // Litre cinsinden
//   duration  Float // Saat cinsinden
//   method    String
//   notes     String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // YENİ: Sezon ilişkisi
//   season   Season? @relation(fields: [seasonId], references: [id])
//   seasonId String? @db.ObjectId

//   // İlişkiler
//   field    Field  @relation(fields: [fieldId], references: [id])
//   fieldId  String @db.ObjectId
//   worker   User   @relation(fields: [workerId], references: [id]) // Yeni ilişki
//   workerId String @db.ObjectId // Yeni alan

//   // YENİ: Bildirimler
//   notifications Notification[] @relation("IrrigationNotifications")
// }

// Tarla işleme kaydı modeli
model ProcessingLog {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  processType ProcessType
  equipment   String?
  duration    Float // Saat cinsinden
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // İlişkiler
  field   Field  @relation(fields: [fieldId], references: [id])
  fieldId String @db.ObjectId

  // YENİ: Bildirimler
  notifications Notification[] @relation("ProcessingLogNotifications")
}

// Envanter Modeli
model Inventory {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  category      InventoryCategory
  totalQuantity Float
  unit          Unit              @default(KG) // String yerine Unit enum kullanacağız
  totalStock    Float?            @default(0) // Yeni eklenen toplam stok alanı
  purchaseDate  DateTime?
  expiryDate    DateTime?
  status        InventoryStatus   @default(AVAILABLE)
  costPrice     Float? // YENİ: Envanterin birim maliyeti
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // İlişkiler
  ownerships            InventoryOwnership[]
  usages                InventoryUsage[]
  inventoryTransactions InventoryTransaction[] // YENİ

  // YENİ: Bildirimler
  notifications Notification[] @relation("InventoryNotifications")

  // Yeni eklenen sulama ilişkileri
  irrigationInventoryUsages IrrigationInventoryUsage[]
}

// Envanter Payları
model InventoryOwnership {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  inventory     Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId   String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  shareQuantity Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Alış Modeli
model Purchase {
  id                     String          @id @default(auto()) @map("_id") @db.ObjectId
  product                String
  category               ProductCategory @default(FERTILIZER) // YENİ: Ürün kategorisi
  quantity               Float
  unit                   Unit            @default(KG) // Birim alanını ekleyelim
  unitPrice              Float
  totalCost              Float
  paymentMethod          PaymentMethod
  creditorPaymentDueDate DateTime? // YENİ: Alacaklının son ödeme tarihi
  dueDate                DateTime? // Ödeme vadesi (ör: 3 ay sonra)
  description            String?
  createdAt              DateTime        @default(now())
  isTemplate             Boolean         @default(false) // YENİ: Şablon mu?
  templateName           String? // YENİ: Şablon adı
  approvalStatus         ApprovalStatus  @default(PENDING) // YENİ: Onay durumu
  approvalRequired       Boolean         @default(true) // YENİ: Onay gerekli mi?
  approvalThreshold      Float           @default(1000) // YENİ: Onay eşiği (TL)

  // YENİ: Sezon ilişkisi
  season   Season? @relation(fields: [seasonId], references: [id])
  seasonId String? @db.ObjectId

  // İlişkiler
  contributors          PurchaseContributor[]
  debts                 Debt[]                 @relation("PurchaseDebts")
  invoices              Invoice[]              @relation("PurchaseInvoices")
  inventoryTransactions InventoryTransaction[] // YENİ
  approvals             PurchaseApproval[] // YENİ: Onaylar

  // YENİ: Bildirimler
  notifications Notification[] @relation("PurchaseNotifications")
}

// YENİ: Alış Onay Modeli
model PurchaseApproval {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  purchase   Purchase       @relation(fields: [purchaseId], references: [id])
  purchaseId String         @db.ObjectId
  approver   User           @relation(fields: [approverId], references: [id])
  approverId String         @db.ObjectId
  status     ApprovalStatus @default(PENDING)
  comment    String?
  approvedAt DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // YENİ: Bildirimler
  notifications Notification[] @relation("ApprovalNotifications")
}

// Alış Katılımcıları (Genişletilmiş)
model PurchaseContributor {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  purchase             Purchase  @relation(fields: [purchaseId], references: [id])
  purchaseId           String    @db.ObjectId
  user                 User      @relation(fields: [userId], references: [id])
  userId               String    @db.ObjectId
  sharePercentage      Float // Ortaklık yüzdesi (ör: 50.0)
  contribution         Float // Bu kullanıcının payı (ör: 26000 TL)
  expectedContribution Float // YENİ: Beklenen katkı (hesaplanmış)
  actualContribution   Float     @default(0) // YENİ: Gerçekte ödenen miktar
  remainingAmount      Float? // YENİ: Kalan borç miktarı
  hasPaid              Boolean   @default(false) // Ödeme yaptı mı?
  paymentDate          DateTime? // Ödeme tarihi
  isCreditor           Boolean // Kredi veren mi? (true ise borcun sahibi)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // İlişkiler
  paymentHistory PaymentHistory[] // YENİ

  // YENİ: Bildirimler
  notifications Notification[] @relation("ContributorNotifications")
}

// YENİ: Ödeme Geçmişi Modeli
model PaymentHistory {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  paymentDate   DateTime
  paymentMethod PaymentMethod
  notes         String?
  createdAt     DateTime      @default(now())

  // İlişkiler
  debt          Debt?                @relation(fields: [debtId], references: [id])
  debtId        String?              @db.ObjectId
  contributor   PurchaseContributor? @relation(fields: [contributorId], references: [id]) // İlişkiyi de isteğe bağlı yapalım
  contributorId String?              @db.ObjectId // Zorunlu alanı isteğe bağlı yapalım (?)
  payer         User                 @relation("PaymentsMade", fields: [payerId], references: [id])
  payerId       String               @db.ObjectId
  receiver      User                 @relation("PaymentsReceived", fields: [receiverId], references: [id])
  receiverId    String               @db.ObjectId

  // YENİ: Bildirimler
  notifications Notification[] @relation("PaymentNotifications")
}

// YENİ: Envanter İşlemleri Modeli
model InventoryTransaction {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  type      TransactionType
  quantity  Float
  date      DateTime
  notes     String?
  createdAt DateTime        @default(now())

  // YENİ: Sezon ilişkisi
  season   Season? @relation(fields: [seasonId], references: [id])
  seasonId String? @db.ObjectId

  // İlişkiler
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String    @db.ObjectId
  purchase    Purchase? @relation(fields: [purchaseId], references: [id])
  purchaseId  String?   @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId

  // YENİ: Bildirimler
  notifications Notification[] @relation("TransactionNotifications")
}

// Borç Modeli (Genişletilmiş)
model Debt {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  amount                Float
  dueDate               DateTime
  status                DebtStatus             @default(PENDING)
  description           String?
  createdAt             DateTime               @default(now())
  paymentDate           DateTime?
  reminderSent          Boolean                @default(false)
  lastReminderDate      DateTime?
  reason                String?
  creditor              User                   @relation("DebtsGiven", fields: [creditorId], references: [id])
  creditorId            String                 @db.ObjectId
  debtor                User                   @relation("DebtsTaken", fields: [debtorId], references: [id])
  debtorId              String                 @db.ObjectId
  invoice               Invoice?               @relation("DebtInvoice", fields: [invoiceId], references: [id])
  invoiceId             String?                @db.ObjectId
  purchase              Purchase?              @relation("PurchaseDebts", fields: [purchaseId], references: [id])
  purchaseId            String?                @db.ObjectId
  paymentHistory        PaymentHistory[]
  wellBillDistributions WellBillDistribution[] // YENİ: Kuyu faturası dağıtım ilişkisi (Bire-çok olarak düzeltildi)

  // YENİ: Bildirimler
  notifications Notification[] @relation("DebtNotifications")
}

// Fatura Modeli
model Invoice {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  number      String        @unique
  amount      Float
  issueDate   DateTime
  dueDate     DateTime
  status      InvoiceStatus @default(PENDING)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // İlişkiler
  purchaser   User      @relation("InvoicePurchaser", fields: [purchaserId], references: [id])
  purchaserId String    @db.ObjectId
  debts       Debt[]    @relation("DebtInvoice")
  purchase    Purchase? @relation("PurchaseInvoices", fields: [purchaseId], references: [id])
  purchaseId  String?   @db.ObjectId

  // YENİ: Bildirimler
  notifications Notification[] @relation("InvoiceNotifications")
}

// Stok Kullanımı
model InventoryUsage {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  inventory    Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId  String    @db.ObjectId
  usedQuantity Float
  usageType    UsageType
  usedBy       User      @relation(fields: [usedById], references: [id])
  usedById     String    @db.ObjectId
  field        Field?    @relation(fields: [fieldId], references: [id])
  fieldId      String?   @db.ObjectId
  process      Process?  @relation(fields: [processId], references: [id])
  processId    String?   @db.ObjectId
  createdAt    DateTime  @default(now())

  // YENİ: Bildirimler
  notifications Notification[] @relation("UsageNotifications")
}

// İşlemler (Tarla, Sulama, vb.) - Güncellendi
model Process {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  type        ProcessType
  status      ProcessStatus @default(DRAFT) // YENİ: İşlem durumu
  field       Field?        @relation(fields: [fieldId], references: [id], onDelete: Cascade) // İlişki isteğe bağlı yapıldı (?) ve onDelete: Cascade eklendi
  fieldId     String?       @db.ObjectId // Alan isteğe bağlı yapıldı (?)
  worker      User          @relation(fields: [workerId], references: [id])
  workerId    String        @db.ObjectId
  date        DateTime
  description String?

  // YENİ: Parçalı işleme alanları
  totalArea           Float // Tarlanın toplam alanı (dekar/dönüm)
  processedArea       Float // İşlenen alan (dekar/dönüm)
  processedPercentage Float // İşlenen alan yüzdesi (0-100)

  // YENİ: Sezon ilişkisi
  season   Season? @relation(fields: [seasonId], references: [id])
  seasonId String? @db.ObjectId

  // İlişkiler
  inventoryUsages       InventoryUsage[]
  equipmentUsages       EquipmentUsage[] // YENİ: Ekipman kullanımları
  processCosts          ProcessCost[] // YENİ: İşlem maliyetleri
  notifications         Notification[] // YENİ: Bildirimler
  inventoryDistribution Json? // YENİ: Envanter dağıtım verisi (JSON olarak)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Bildirimler - Güncellendi
model Notification {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  message     String
  type        NotificationType
  priority    NotificationPriority @default(NORMAL) // YENİ: Bildirim önceliği
  isRead      Boolean              @default(false)
  isArchived  Boolean              @default(false) // YENİ: Arşivlenmiş mi?
  link        String? // YENİ: Bildirime tıklandığında yönlendirilecek URL
  expiresAt   DateTime? // YENİ: Bildirim geçerlilik süresi
  targetRoles Role[] // YENİ: Hedef roller
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  // İlişkiler
  receiver   User    @relation("NotificationsReceived", fields: [receiverId], references: [id])
  receiverId String  @db.ObjectId
  sender     User?   @relation("NotificationsSent", fields: [senderId], references: [id])
  senderId   String? @db.ObjectId

  // YENİ: İşlem ilişkisi
  process   Process? @relation(fields: [processId], references: [id])
  processId String?  @db.ObjectId

  // YENİ: Diğer ilişkiler
  debt             Debt?                 @relation("DebtNotifications", fields: [debtId], references: [id])
  debtId           String?               @db.ObjectId
  purchase         Purchase?             @relation("PurchaseNotifications", fields: [purchaseId], references: [id])
  purchaseId       String?               @db.ObjectId
  inventory        Inventory?            @relation("InventoryNotifications", fields: [inventoryId], references: [id])
  inventoryId      String?               @db.ObjectId
  irrigation       IrrigationLog?        @relation("IrrigationNotifications", fields: [irrigationId], references: [id])
  irrigationId     String?               @db.ObjectId
  field            Field?                @relation("FieldNotifications", fields: [fieldId], references: [id])
  fieldId          String?               @db.ObjectId
  season           Season?               @relation("SeasonNotifications", fields: [seasonId], references: [id])
  seasonId         String?               @db.ObjectId
  crop             Crop?                 @relation("CropNotifications", fields: [cropId], references: [id])
  cropId           String?               @db.ObjectId
  well             Well?                 @relation("WellNotifications", fields: [wellId], references: [id])
  wellId           String?               @db.ObjectId
  processingLog    ProcessingLog?        @relation("ProcessingLogNotifications", fields: [processingLogId], references: [id])
  processingLogId  String?               @db.ObjectId
  invoice          Invoice?              @relation("InvoiceNotifications", fields: [invoiceId], references: [id])
  invoiceId        String?               @db.ObjectId
  inventoryUsage   InventoryUsage?       @relation("UsageNotifications", fields: [inventoryUsageId], references: [id])
  inventoryUsageId String?               @db.ObjectId
  transaction      InventoryTransaction? @relation("TransactionNotifications", fields: [transactionId], references: [id])
  transactionId    String?               @db.ObjectId
  payment          PaymentHistory?       @relation("PaymentNotifications", fields: [paymentId], references: [id])
  paymentId        String?               @db.ObjectId
  contributor      PurchaseContributor?  @relation("ContributorNotifications", fields: [contributorId], references: [id])
  contributorId    String?               @db.ObjectId
  approval         PurchaseApproval?     @relation("ApprovalNotifications", fields: [approvalId], references: [id])
  approvalId       String?               @db.ObjectId

  // Eksik ilişkiler eklendi
  equipment        Equipment?         @relation("EquipmentNotifications", fields: [equipmentId], references: [id])
  equipmentId      String?            @db.ObjectId
  equipmentUsage   EquipmentUsage?    @relation("EquipmentUsageNotifications", fields: [equipmentUsageId], references: [id])
  equipmentUsageId String?            @db.ObjectId
  processCost      ProcessCost?       @relation("ProcessCostNotifications", fields: [processCostId], references: [id])
  processCostId    String?            @db.ObjectId
  fieldExpense     FieldExpense?      @relation("ExpenseNotifications", fields: [fieldExpenseId], references: [id])
  fieldExpenseId   String?            @db.ObjectId
  ownerExpense     FieldOwnerExpense? @relation("OwnerExpenseNotifications", fields: [ownerExpenseId], references: [id])
  ownerExpenseId   String?            @db.ObjectId
}

// YENİ: Bildirim Tercihleri Modeli
model NotificationPreference {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  user                    User     @relation(fields: [userId], references: [id])
  userId                  String   @unique @db.ObjectId
  emailNotifications      Boolean  @default(true)
  pushNotifications       Boolean  @default(true)
  inAppNotifications      Boolean  @default(true)
  dailyDigest             Boolean  @default(false)
  notifyOnDebtReminders   Boolean  @default(true)
  notifyOnPayments        Boolean  @default(true)
  notifyOnProcessUpdates  Boolean  @default(true)
  notifyOnInventoryAlerts Boolean  @default(true)
  notifyOnApprovals       Boolean  @default(true)
  notifyOnIrrigation      Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

// YENİ: Tarım Aleti/Ekipman Modeli
model Equipment {
  id                       String          @id @default(auto()) @map("_id") @db.ObjectId
  name                     String // Ekipman adı (Mibzer, Kültivatör, Diskaro vb.)
  type                     EquipmentType // Ekipman tipi (SEEDING, TILLAGE, SPRAYING vb.)
  fuelConsumptionPerDecare Float // Dekar başına yakıt tüketimi (litre)
  description              String? // Açıklama
  status                   EquipmentStatus @default(ACTIVE)
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt

  // İlişkiler
  ownerships   EquipmentOwnership[] // Ekipman sahiplikleri
  capabilities EquipmentCapability[] // Ekipman yetenekleri
  usages       EquipmentUsage[] // Ekipman kullanımları

  // YENİ: Bildirimler
  notifications Notification[] @relation("EquipmentNotifications")
}

// YENİ: Ekipman Sahipliği Modeli
model EquipmentOwnership {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  equipment           Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId         String    @db.ObjectId
  user                User      @relation(fields: [userId], references: [id])
  userId              String    @db.ObjectId
  ownershipPercentage Float // Sahiplik yüzdesi
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@unique([equipmentId, userId])
}

// YENİ: Ekipman Yetenek Modeli
model EquipmentCapability {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  equipment         Equipment         @relation(fields: [equipmentId], references: [id])
  equipmentId       String            @db.ObjectId
  inventoryCategory InventoryCategory // Hangi envanter kategorisini kullanabilir
  canUse            Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([equipmentId, inventoryCategory])
}

// YENİ: Ekipman Kullanım Modeli
model EquipmentUsage {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  process             Process   @relation(fields: [processId], references: [id])
  processId           String    @db.ObjectId
  equipment           Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId         String    @db.ObjectId
  user                User      @relation(fields: [userId], references: [id])
  userId              String    @db.ObjectId
  areaProcessed       Float // İşlenen alan (dekar/dönüm)
  processedPercentage Float // İşlenen alan yüzdesi (0-100)
  fuelConsumed        Float // Tüketilen yakıt (litre)
  unit                Unit // Birim (DECARE/DONUM)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // YENİ: Bildirimler
  notifications Notification[] @relation("EquipmentUsageNotifications")
}

// YENİ: İşlem Maliyeti Modeli
model ProcessCost {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  process       Process  @relation(fields: [processId], references: [id])
  processId     String   @db.ObjectId
  laborCost     Float // İşçilik maliyeti
  equipmentCost Float // Ekipman kullanım maliyeti
  inventoryCost Float // Kullanılan envanter maliyeti
  fuelCost      Float // Yakıt maliyeti
  totalCost     Float // Toplam maliyet
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // İlişkiler
  field         Field               @relation("FieldProcessCosts", fields: [fieldId], references: [id]) // Karşı ilişki eklendi
  fieldId       String              @db.ObjectId // Karşı ilişki için alan eklendi
  ownerExpenses FieldOwnerExpense[] // Tarla sahibi giderleri

  // YENİ: Bildirimler
  notifications Notification[] @relation("ProcessCostNotifications")
}

// YENİ: Tarla Gideri Modeli (Genelleştirilmiş)
model FieldExpense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  field       Field    @relation(fields: [fieldId], references: [id])
  fieldId     String   @db.ObjectId
  season      Season   @relation(fields: [seasonId], references: [id])
  seasonId    String   @db.ObjectId
  totalCost   Float // Giderin toplam maliyeti
  description String // "Kuyu Faturası: Haziran 2025" veya "İlaçlama Gideri"
  expenseDate DateTime // Giderin tarihi
  sourceType  String // Giderin kaynağı: "PROCESS_COST" veya "WELL_BILL"
  sourceId    String // Kaynak kaydının ID'si (ProcessCost veya WellBillingPeriod ID'si)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // YENİ: Bildirimler
  notifications Notification[] @relation("ExpenseNotifications")
}

// YENİ: Tarla Sahibi Gideri Modeli
model FieldOwnerExpense {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  fieldOwnership   FieldOwnership @relation(fields: [fieldOwnershipId], references: [id])
  fieldOwnershipId String         @db.ObjectId
  processCost      ProcessCost    @relation(fields: [processCostId], references: [id])
  processCostId    String         @db.ObjectId
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @db.ObjectId
  amount           Float // Tutar
  percentage       Float // Sahiplik yüzdesine göre hesaplanan oran
  periodStart      DateTime // Dönem başlangıcı
  periodEnd        DateTime // Dönem sonu
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // YENİ: Bildirimler
  notifications Notification[] @relation("OwnerExpenseNotifications")
}

// --------------------------------------------------
// YENİ EKLENEN SULAMA VE FATURALANDIRMA MODELLERİ
// --------------------------------------------------

// Sulama Kaydı Modeli
model IrrigationLog {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  startDateTime DateTime
  duration      Float // Dakika cinsinden
  wellId        String   @db.ObjectId
  well          Well     @relation(fields: [wellId], references: [id])
  notes         String?
  status        String   @default("COMPLETED") // PLANNED, COMPLETED, CANCELLED
  createdBy     String   @db.ObjectId
  user          User     @relation(fields: [createdBy], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  seasonId      String?  @db.ObjectId
  season        Season?  @relation(fields: [seasonId], references: [id])

  // İlişkiler
  fieldUsages     IrrigationFieldUsage[]
  inventoryUsages IrrigationInventoryUsage[]
  billingUsages   WellBillingIrrigationUsage[]
  ownerSummaries  IrrigationOwnerSummary[] // Yeni ilişki eklendi
  notifications   Notification[]               @relation("IrrigationNotifications")
}

// Sulama Tarla Kullanımı Modeli
model IrrigationFieldUsage {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  irrigationLogId     String        @db.ObjectId
  irrigationLog       IrrigationLog @relation(fields: [irrigationLogId], references: [id], onDelete: Cascade)
  fieldId             String        @db.ObjectId
  field               Field         @relation(fields: [fieldId], references: [id])
  percentage          Float // Sulama yüzdesi
  actualIrrigatedArea Float? // Gerçek sulanan alan (dekar)
  createdAt           DateTime      @default(now())

  // İlişkiler
  ownerUsages IrrigationOwnerUsage[]
}

// Sulama Sahip Kullanımı Modeli
model IrrigationOwnerUsage {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  irrigationFieldUsageId String               @db.ObjectId
  irrigationFieldUsage   IrrigationFieldUsage @relation(fields: [irrigationFieldUsageId], references: [id])
  ownerId                String               @db.ObjectId
  owner                  User                 @relation(fields: [ownerId], references: [id])
  ownershipPercentage    Float // Sahiplik yüzdesi
  usagePercentage        Float // Kullanım yüzdesi
  createdAt              DateTime             @default(now())
}

// YENİ: Sulama Sahip Özeti Modeli
model IrrigationOwnerSummary {
  id                     String        @id @default(auto()) @map("_id") @db.ObjectId
  irrigationLogId        String        @db.ObjectId
  irrigationLog          IrrigationLog @relation(fields: [irrigationLogId], references: [id], onDelete: Cascade)
  ownerId                String        @db.ObjectId
  owner                  User          @relation(fields: [ownerId], references: [id])
  totalIrrigatedArea     Float // Bu sahip için bu sulamada toplam sulanan alan (dekar)
  totalAllocatedDuration Float // Bu sahip için bu sulamada ayrılan toplam süre (dakika)
  createdAt              DateTime      @default(now())

  @@unique([irrigationLogId, ownerId]) // Bir sulama kaydında her sahip için tek özet olmalı
}

// Sulama Envanter Kullanımı Modeli
model IrrigationInventoryUsage {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  irrigationLogId String        @db.ObjectId
  irrigationLog   IrrigationLog @relation(fields: [irrigationLogId], references: [id], onDelete: Cascade)
  inventoryId     String        @db.ObjectId
  inventory       Inventory     @relation(fields: [inventoryId], references: [id])
  quantity        Float // Miktar
  unitPrice       Float // Birim fiyat
  totalCost       Float // Toplam maliyet
  createdAt       DateTime      @default(now())

  // İlişkiler
  ownerUsages IrrigationInventoryOwnerUsage[]
}

// Sulama Envanter Sahip Kullanımı Modeli
model IrrigationInventoryOwnerUsage {
  id                         String                   @id @default(auto()) @map("_id") @db.ObjectId
  irrigationInventoryUsageId String                   @db.ObjectId
  irrigationInventoryUsage   IrrigationInventoryUsage @relation(fields: [irrigationInventoryUsageId], references: [id])
  ownerId                    String                   @db.ObjectId
  owner                      User                     @relation(fields: [ownerId], references: [id])
  percentage                 Float // Kullanım yüzdesi
  quantity                   Float // Miktar
  cost                       Float // Maliyet
  createdAt                  DateTime                 @default(now())
}

// Kuyu Fatura Dönemi Modeli
model WellBillingPeriod {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  wellId      String   @db.ObjectId
  well        Well     @relation(fields: [wellId], references: [id])
  startDate   DateTime
  endDate     DateTime
  totalAmount Float // Toplam fatura tutarı
  totalUsage  Float? // Toplam kullanım (kWh)
  status      String   @default("PENDING") // PENDING, DISTRIBUTED, PAID
  createdAt   DateTime @default(now())

  // İlişkiler
  irrigationUsages WellBillingIrrigationUsage[]
  distributions    WellBillDistribution[]
}

// Kuyu Fatura Sulama Kullanımı Modeli
model WellBillingIrrigationUsage {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  wellBillingPeriodId String            @db.ObjectId
  wellBillingPeriod   WellBillingPeriod @relation(fields: [wellBillingPeriodId], references: [id])
  irrigationLogId     String            @db.ObjectId
  irrigationLog       IrrigationLog     @relation(fields: [irrigationLogId], references: [id], onDelete: Cascade)
  duration            Float // Süre
  percentage          Float // Fatura dönemindeki yüzdesi
  amount              Float // Tutar
  createdAt           DateTime          @default(now())

  @@index([wellBillingPeriodId])
  @@index([irrigationLogId])
}

model WellBillDistribution {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  wellBillingPeriodId String            @db.ObjectId
  wellBillingPeriod   WellBillingPeriod @relation(fields: [wellBillingPeriodId], references: [id], onDelete: Cascade)
  fieldId             String            @db.ObjectId
  field               Field             @relation(fields: [fieldId], references: [id])
  ownerId             String            @db.ObjectId
  owner               User              @relation(fields: [ownerId], references: [id])
  basisDuration       Float // Dakika bazlı temel
  basisArea           Float? // Opsiyonel - alan bazlı kullanılırsa
  basisWeight         Float // Hesaplamada kullanılan normalize ağırlık (örn: duration ya da area)
  sharePercentage     Float // Bu owner’ın toplamdan aldığı yüzde
  amount              Float // TL tutar
  createdAt           DateTime          @default(now())
  debt                Debt?             @relation(fields: [debtId], references: [id])
  debtId              String?           @db.ObjectId

  @@unique([wellBillingPeriodId, ownerId, fieldId])
}

// --------------------------------------------------
// ENUM TANIMLAMALARI
// --------------------------------------------------

// Enum'lar
enum Role {
  ADMIN
  OWNER
  WORKER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum FieldStatus {
  ACTIVE
  FALLOW
  HARVESTED
}

enum WellStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum CropStatus {
  GROWING
  HARVESTED
  FAILED
}

enum InventoryCategory {
  SEED
  FERTILIZER
  PESTICIDE
  EQUIPMENT
  FUEL
  OTHER
}

// YENİ: Ürün Kategorisi Enum
enum ProductCategory {
  FERTILIZER // Gübre
  FEED // Besleme
  PESTICIDE // İlaç
  FUEL // Yakıt
  SEED // Tohum
  EQUIPMENT // Ekipman
  OTHER // Diğer
}

enum InventoryStatus {
  AVAILABLE
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  CREDIT
  BANK_TRANSFER // YENİ
}

enum DebtStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  PARTIALLY_PAID // YENİ
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum UsageType {
  IRRIGATION
  PROCESSING
  GENERAL
}

enum ProcessType {
  PLOWING
  SEEDING
  FERTILIZING
  PESTICIDE
  HARVESTING
  OTHER
}

// YENİ: İşlem Durumu Enum
enum ProcessStatus {
  DRAFT
  PENDING_INVENTORY_EQUIPMENT
  FINALIZED
  CANCELLED
}

// YENİ: Bildirim Türleri Genişletildi
enum NotificationType {
  SYSTEM
  IRRIGATION
  PROCESSING
  INVENTORY
  INVOICE
  DEBT
  APPROVAL // YENİ: Onay bildirimi
  REMINDER // YENİ: Hatırlatma bildirimi
  FIELD_PROCESSING // YENİ: Tarla işleme bildirimi
  PAYMENT_DUE // YENİ: Ödeme vadesi bildirimi
  PAYMENT_RECEIVED // YENİ: Ödeme alındı bildirimi
  PROCESS_COMPLETED // YENİ: Süreç tamamlandı bildirimi
  TASK_ASSIGNED // YENİ: Görev atandı bildirimi
  INVENTORY_LOW // YENİ: Envanter azaldı bildirimi
  DEBT_REMINDER // YENİ: Borç hatırlatma bildirimi
  IRRIGATION_SCHEDULED // YENİ: Sulama planlandı bildirimi
  IRRIGATION_COMPLETED // YENİ: Sulama tamamlandı bildirimi
  SYSTEM_ALERT // YENİ: Sistem uyarısı
  TASK_UPDATED // YENİ: Görev güncellendi bildirimi
  PROCESS_UPDATED // YENİ: İşlem güncellendi bildirimi
  OTHER
}

// YENİ: Bildirim Önceliği Enum
enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// YENİ: Envanter İşlem Tipleri
enum TransactionType {
  PURCHASE
  USAGE
  TRANSFER
  ADJUSTMENT
}

// YENİ: Onay Durumu Enum
enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// YENİ: Ekipman Tipi Enum
enum EquipmentType {
  SEEDING // Ekim (Mibzer)
  TILLAGE // Toprak işleme (Kültivatör, Diskaro)
  SPRAYING // İlaçlama
  FERTILIZING // Gübreleme
  HARVESTING // Hasat
  OTHER // Diğer
}

// YENİ: Ekipman Durumu Enum
enum EquipmentStatus {
  ACTIVE // Aktif
  MAINTENANCE // Bakımda
  INACTIVE // Pasif
}

enum Unit {
  KG
  TON
  LITRE
  ADET
  CUVAL
  BIDON
  PAKET
  METRE
  METREKARE
  DECARE // Dekar (1000 m²)
  DONUM // Dönüm (1000 m²) - Aynı anlama gelir
  HECTARE // Hektar (10000 m²)
  DIGER
}

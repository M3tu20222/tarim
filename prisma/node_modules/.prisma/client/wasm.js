
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SeasonScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  creatorId: 'creatorId'
};

exports.Prisma.FieldScalarFieldEnum = {
  id: 'id',
  name: 'name',
  location: 'location',
  size: 'size',
  coordinates: 'coordinates',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  seasonId: 'seasonId'
};

exports.Prisma.FieldOwnershipScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  percentage: 'percentage',
  fieldId: 'fieldId',
  userId: 'userId'
};

exports.Prisma.FieldWorkerAssignmentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  fieldId: 'fieldId',
  userId: 'userId'
};

exports.Prisma.FieldWellScalarFieldEnum = {
  id: 'id',
  fieldId: 'fieldId',
  wellId: 'wellId',
  createdAt: 'createdAt'
};

exports.Prisma.WorkerWellAssignmentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  workerId: 'workerId',
  wellId: 'wellId'
};

exports.Prisma.WellScalarFieldEnum = {
  id: 'id',
  name: 'name',
  depth: 'depth',
  capacity: 'capacity',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CropScalarFieldEnum = {
  id: 'id',
  name: 'name',
  plantedDate: 'plantedDate',
  harvestDate: 'harvestDate',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  seasonId: 'seasonId',
  fieldId: 'fieldId'
};

exports.Prisma.ProcessingLogScalarFieldEnum = {
  id: 'id',
  date: 'date',
  processType: 'processType',
  equipment: 'equipment',
  duration: 'duration',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  fieldId: 'fieldId'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  totalQuantity: 'totalQuantity',
  unit: 'unit',
  totalStock: 'totalStock',
  purchaseDate: 'purchaseDate',
  expiryDate: 'expiryDate',
  status: 'status',
  costPrice: 'costPrice',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryOwnershipScalarFieldEnum = {
  id: 'id',
  inventoryId: 'inventoryId',
  userId: 'userId',
  shareQuantity: 'shareQuantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseScalarFieldEnum = {
  id: 'id',
  product: 'product',
  category: 'category',
  quantity: 'quantity',
  unit: 'unit',
  unitPrice: 'unitPrice',
  totalCost: 'totalCost',
  paymentMethod: 'paymentMethod',
  creditorPaymentDueDate: 'creditorPaymentDueDate',
  dueDate: 'dueDate',
  description: 'description',
  createdAt: 'createdAt',
  isTemplate: 'isTemplate',
  templateName: 'templateName',
  approvalStatus: 'approvalStatus',
  approvalRequired: 'approvalRequired',
  approvalThreshold: 'approvalThreshold',
  seasonId: 'seasonId'
};

exports.Prisma.PurchaseApprovalScalarFieldEnum = {
  id: 'id',
  purchaseId: 'purchaseId',
  approverId: 'approverId',
  status: 'status',
  comment: 'comment',
  approvedAt: 'approvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseContributorScalarFieldEnum = {
  id: 'id',
  purchaseId: 'purchaseId',
  userId: 'userId',
  sharePercentage: 'sharePercentage',
  contribution: 'contribution',
  expectedContribution: 'expectedContribution',
  actualContribution: 'actualContribution',
  remainingAmount: 'remainingAmount',
  hasPaid: 'hasPaid',
  paymentDate: 'paymentDate',
  isCreditor: 'isCreditor',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentHistoryScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  paymentDate: 'paymentDate',
  paymentMethod: 'paymentMethod',
  notes: 'notes',
  createdAt: 'createdAt',
  debtId: 'debtId',
  contributorId: 'contributorId',
  payerId: 'payerId',
  receiverId: 'receiverId'
};

exports.Prisma.InventoryTransactionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  quantity: 'quantity',
  date: 'date',
  notes: 'notes',
  createdAt: 'createdAt',
  seasonId: 'seasonId',
  inventoryId: 'inventoryId',
  purchaseId: 'purchaseId',
  userId: 'userId'
};

exports.Prisma.DebtScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  dueDate: 'dueDate',
  status: 'status',
  description: 'description',
  createdAt: 'createdAt',
  paymentDate: 'paymentDate',
  reminderSent: 'reminderSent',
  lastReminderDate: 'lastReminderDate',
  reason: 'reason',
  creditorId: 'creditorId',
  debtorId: 'debtorId',
  invoiceId: 'invoiceId',
  purchaseId: 'purchaseId'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  number: 'number',
  amount: 'amount',
  issueDate: 'issueDate',
  dueDate: 'dueDate',
  status: 'status',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  purchaserId: 'purchaserId',
  purchaseId: 'purchaseId'
};

exports.Prisma.InventoryUsageScalarFieldEnum = {
  id: 'id',
  inventoryId: 'inventoryId',
  usedQuantity: 'usedQuantity',
  usageType: 'usageType',
  usedById: 'usedById',
  fieldId: 'fieldId',
  processId: 'processId',
  createdAt: 'createdAt'
};

exports.Prisma.ProcessScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  fieldId: 'fieldId',
  workerId: 'workerId',
  date: 'date',
  description: 'description',
  totalArea: 'totalArea',
  processedArea: 'processedArea',
  processedPercentage: 'processedPercentage',
  seasonId: 'seasonId',
  inventoryDistribution: 'inventoryDistribution',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  priority: 'priority',
  isRead: 'isRead',
  isArchived: 'isArchived',
  link: 'link',
  expiresAt: 'expiresAt',
  targetRoles: 'targetRoles',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  receiverId: 'receiverId',
  senderId: 'senderId',
  processId: 'processId',
  debtId: 'debtId',
  purchaseId: 'purchaseId',
  inventoryId: 'inventoryId',
  irrigationId: 'irrigationId',
  fieldId: 'fieldId',
  seasonId: 'seasonId',
  cropId: 'cropId',
  wellId: 'wellId',
  processingLogId: 'processingLogId',
  invoiceId: 'invoiceId',
  inventoryUsageId: 'inventoryUsageId',
  transactionId: 'transactionId',
  paymentId: 'paymentId',
  contributorId: 'contributorId',
  approvalId: 'approvalId',
  equipmentId: 'equipmentId',
  equipmentUsageId: 'equipmentUsageId',
  processCostId: 'processCostId',
  fieldExpenseId: 'fieldExpenseId',
  ownerExpenseId: 'ownerExpenseId'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  emailNotifications: 'emailNotifications',
  pushNotifications: 'pushNotifications',
  inAppNotifications: 'inAppNotifications',
  dailyDigest: 'dailyDigest',
  notifyOnDebtReminders: 'notifyOnDebtReminders',
  notifyOnPayments: 'notifyOnPayments',
  notifyOnProcessUpdates: 'notifyOnProcessUpdates',
  notifyOnInventoryAlerts: 'notifyOnInventoryAlerts',
  notifyOnApprovals: 'notifyOnApprovals',
  notifyOnIrrigation: 'notifyOnIrrigation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  fuelConsumptionPerDecare: 'fuelConsumptionPerDecare',
  description: 'description',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentOwnershipScalarFieldEnum = {
  id: 'id',
  equipmentId: 'equipmentId',
  userId: 'userId',
  ownershipPercentage: 'ownershipPercentage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentCapabilityScalarFieldEnum = {
  id: 'id',
  equipmentId: 'equipmentId',
  inventoryCategory: 'inventoryCategory',
  canUse: 'canUse',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentUsageScalarFieldEnum = {
  id: 'id',
  processId: 'processId',
  equipmentId: 'equipmentId',
  userId: 'userId',
  areaProcessed: 'areaProcessed',
  processedPercentage: 'processedPercentage',
  fuelConsumed: 'fuelConsumed',
  unit: 'unit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProcessCostScalarFieldEnum = {
  id: 'id',
  processId: 'processId',
  laborCost: 'laborCost',
  equipmentCost: 'equipmentCost',
  inventoryCost: 'inventoryCost',
  fuelCost: 'fuelCost',
  totalCost: 'totalCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  fieldId: 'fieldId'
};

exports.Prisma.FieldExpenseScalarFieldEnum = {
  id: 'id',
  fieldId: 'fieldId',
  seasonId: 'seasonId',
  totalCost: 'totalCost',
  description: 'description',
  expenseDate: 'expenseDate',
  sourceType: 'sourceType',
  sourceId: 'sourceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FieldOwnerExpenseScalarFieldEnum = {
  id: 'id',
  fieldOwnershipId: 'fieldOwnershipId',
  processCostId: 'processCostId',
  userId: 'userId',
  amount: 'amount',
  percentage: 'percentage',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  debtId: 'debtId'
};

exports.Prisma.IrrigationLogScalarFieldEnum = {
  id: 'id',
  startDateTime: 'startDateTime',
  duration: 'duration',
  wellId: 'wellId',
  notes: 'notes',
  status: 'status',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  seasonId: 'seasonId'
};

exports.Prisma.IrrigationFieldUsageScalarFieldEnum = {
  id: 'id',
  irrigationLogId: 'irrigationLogId',
  fieldId: 'fieldId',
  percentage: 'percentage',
  actualIrrigatedArea: 'actualIrrigatedArea',
  createdAt: 'createdAt'
};

exports.Prisma.IrrigationOwnerUsageScalarFieldEnum = {
  id: 'id',
  irrigationFieldUsageId: 'irrigationFieldUsageId',
  ownerId: 'ownerId',
  ownershipPercentage: 'ownershipPercentage',
  usagePercentage: 'usagePercentage',
  createdAt: 'createdAt'
};

exports.Prisma.IrrigationOwnerSummaryScalarFieldEnum = {
  id: 'id',
  irrigationLogId: 'irrigationLogId',
  ownerId: 'ownerId',
  totalIrrigatedArea: 'totalIrrigatedArea',
  totalAllocatedDuration: 'totalAllocatedDuration',
  createdAt: 'createdAt'
};

exports.Prisma.IrrigationInventoryUsageScalarFieldEnum = {
  id: 'id',
  irrigationLogId: 'irrigationLogId',
  inventoryId: 'inventoryId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalCost: 'totalCost',
  createdAt: 'createdAt'
};

exports.Prisma.IrrigationInventoryOwnerUsageScalarFieldEnum = {
  id: 'id',
  irrigationInventoryUsageId: 'irrigationInventoryUsageId',
  ownerId: 'ownerId',
  percentage: 'percentage',
  quantity: 'quantity',
  cost: 'cost',
  createdAt: 'createdAt'
};

exports.Prisma.WellBillingPeriodScalarFieldEnum = {
  id: 'id',
  wellId: 'wellId',
  startDate: 'startDate',
  endDate: 'endDate',
  paymentDueDate: 'paymentDueDate',
  totalAmount: 'totalAmount',
  totalUsage: 'totalUsage',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.WellBillingIrrigationUsageScalarFieldEnum = {
  id: 'id',
  wellBillingPeriodId: 'wellBillingPeriodId',
  irrigationLogId: 'irrigationLogId',
  duration: 'duration',
  percentage: 'percentage',
  amount: 'amount',
  createdAt: 'createdAt'
};

exports.Prisma.WellBillFieldDistributionScalarFieldEnum = {
  id: 'id',
  wellBillingPeriodId: 'wellBillingPeriodId',
  fieldId: 'fieldId',
  amount: 'amount',
  createdAt: 'createdAt'
};

exports.Prisma.WellBillDistributionScalarFieldEnum = {
  id: 'id',
  wellBillingPeriodId: 'wellBillingPeriodId',
  fieldId: 'fieldId',
  ownerId: 'ownerId',
  amount: 'amount',
  basisDuration: 'basisDuration',
  sharePercentage: 'sharePercentage',
  basisArea: 'basisArea',
  basisWeight: 'basisWeight',
  debtId: 'debtId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  OWNER: 'OWNER',
  WORKER: 'WORKER'
};

exports.Status = exports.$Enums.Status = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

exports.CropStatus = exports.$Enums.CropStatus = {
  GROWING: 'GROWING',
  HARVESTED: 'HARVESTED',
  FAILED: 'FAILED'
};

exports.ProcessType = exports.$Enums.ProcessType = {
  PLOWING: 'PLOWING',
  SEEDING: 'SEEDING',
  FERTILIZING: 'FERTILIZING',
  PESTICIDE: 'PESTICIDE',
  HARVESTING: 'HARVESTING',
  OTHER: 'OTHER'
};

exports.InventoryCategory = exports.$Enums.InventoryCategory = {
  SEED: 'SEED',
  FERTILIZER: 'FERTILIZER',
  PESTICIDE: 'PESTICIDE',
  EQUIPMENT: 'EQUIPMENT',
  FUEL: 'FUEL',
  OTHER: 'OTHER'
};

exports.Unit = exports.$Enums.Unit = {
  KG: 'KG',
  TON: 'TON',
  LITRE: 'LITRE',
  ADET: 'ADET',
  CUVAL: 'CUVAL',
  BIDON: 'BIDON',
  PAKET: 'PAKET',
  METRE: 'METRE',
  METREKARE: 'METREKARE',
  DECARE: 'DECARE',
  DONUM: 'DONUM',
  HECTARE: 'HECTARE',
  DIGER: 'DIGER'
};

exports.InventoryStatus = exports.$Enums.InventoryStatus = {
  AVAILABLE: 'AVAILABLE',
  LOW_STOCK: 'LOW_STOCK',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  EXPIRED: 'EXPIRED'
};

exports.ProductCategory = exports.$Enums.ProductCategory = {
  FERTILIZER: 'FERTILIZER',
  FEED: 'FEED',
  PESTICIDE: 'PESTICIDE',
  FUEL: 'FUEL',
  SEED: 'SEED',
  EQUIPMENT: 'EQUIPMENT',
  OTHER: 'OTHER'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CREDIT_CARD: 'CREDIT_CARD',
  CREDIT: 'CREDIT',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  PURCHASE: 'PURCHASE',
  USAGE: 'USAGE',
  TRANSFER: 'TRANSFER',
  ADJUSTMENT: 'ADJUSTMENT'
};

exports.DebtStatus = exports.$Enums.DebtStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED',
  PARTIALLY_PAID: 'PARTIALLY_PAID'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.UsageType = exports.$Enums.UsageType = {
  IRRIGATION: 'IRRIGATION',
  PROCESSING: 'PROCESSING',
  GENERAL: 'GENERAL'
};

exports.ProcessStatus = exports.$Enums.ProcessStatus = {
  DRAFT: 'DRAFT',
  PENDING_INVENTORY_EQUIPMENT: 'PENDING_INVENTORY_EQUIPMENT',
  FINALIZED: 'FINALIZED',
  CANCELLED: 'CANCELLED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  SYSTEM: 'SYSTEM',
  IRRIGATION: 'IRRIGATION',
  PROCESSING: 'PROCESSING',
  INVENTORY: 'INVENTORY',
  INVOICE: 'INVOICE',
  DEBT: 'DEBT',
  APPROVAL: 'APPROVAL',
  REMINDER: 'REMINDER',
  FIELD_PROCESSING: 'FIELD_PROCESSING',
  PAYMENT_DUE: 'PAYMENT_DUE',
  PAYMENT_RECEIVED: 'PAYMENT_RECEIVED',
  PROCESS_COMPLETED: 'PROCESS_COMPLETED',
  TASK_ASSIGNED: 'TASK_ASSIGNED',
  INVENTORY_LOW: 'INVENTORY_LOW',
  DEBT_REMINDER: 'DEBT_REMINDER',
  IRRIGATION_SCHEDULED: 'IRRIGATION_SCHEDULED',
  IRRIGATION_COMPLETED: 'IRRIGATION_COMPLETED',
  SYSTEM_ALERT: 'SYSTEM_ALERT',
  TASK_UPDATED: 'TASK_UPDATED',
  PROCESS_UPDATED: 'PROCESS_UPDATED',
  OTHER: 'OTHER'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.EquipmentType = exports.$Enums.EquipmentType = {
  SEEDING: 'SEEDING',
  TILLAGE: 'TILLAGE',
  SPRAYING: 'SPRAYING',
  FERTILIZING: 'FERTILIZING',
  HARVESTING: 'HARVESTING',
  OTHER: 'OTHER'
};

exports.EquipmentStatus = exports.$Enums.EquipmentStatus = {
  ACTIVE: 'ACTIVE',
  MAINTENANCE: 'MAINTENANCE',
  INACTIVE: 'INACTIVE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Season: 'Season',
  Field: 'Field',
  FieldOwnership: 'FieldOwnership',
  FieldWorkerAssignment: 'FieldWorkerAssignment',
  FieldWell: 'FieldWell',
  WorkerWellAssignment: 'WorkerWellAssignment',
  Well: 'Well',
  Crop: 'Crop',
  ProcessingLog: 'ProcessingLog',
  Inventory: 'Inventory',
  InventoryOwnership: 'InventoryOwnership',
  Purchase: 'Purchase',
  PurchaseApproval: 'PurchaseApproval',
  PurchaseContributor: 'PurchaseContributor',
  PaymentHistory: 'PaymentHistory',
  InventoryTransaction: 'InventoryTransaction',
  Debt: 'Debt',
  Invoice: 'Invoice',
  InventoryUsage: 'InventoryUsage',
  Process: 'Process',
  Notification: 'Notification',
  NotificationPreference: 'NotificationPreference',
  Equipment: 'Equipment',
  EquipmentOwnership: 'EquipmentOwnership',
  EquipmentCapability: 'EquipmentCapability',
  EquipmentUsage: 'EquipmentUsage',
  ProcessCost: 'ProcessCost',
  FieldExpense: 'FieldExpense',
  FieldOwnerExpense: 'FieldOwnerExpense',
  IrrigationLog: 'IrrigationLog',
  IrrigationFieldUsage: 'IrrigationFieldUsage',
  IrrigationOwnerUsage: 'IrrigationOwnerUsage',
  IrrigationOwnerSummary: 'IrrigationOwnerSummary',
  IrrigationInventoryUsage: 'IrrigationInventoryUsage',
  IrrigationInventoryOwnerUsage: 'IrrigationInventoryOwnerUsage',
  WellBillingPeriod: 'WellBillingPeriod',
  WellBillingIrrigationUsage: 'WellBillingIrrigationUsage',
  WellBillFieldDistribution: 'WellBillFieldDistribution',
  WellBillDistribution: 'WellBillDistribution'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// Kullanıcı Modeli
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      Role     @default(WORKER)
  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  irrigationLogs        IrrigationLog[]
  ownedFields           FieldOwnership[]        @relation("UserOwnedFields") // Sahip olunan tarlalar
  assignedFields        FieldWorkerAssignment[] @relation("UserAssignedFields") // İşçi olarak atanan tarlalar
  inventoryOwnership    InventoryOwnership[]
  debtsAsCreditor       Debt[]                  @relation("DebtsGiven")
  debtsAsDebtor         Debt[]                  @relation("DebtsTaken")
  purchaseContributions PurchaseContributor[]
  receivedNotifications Notification[]          @relation("NotificationsReceived")
  sentNotifications     Notification[]          @relation("NotificationsSent")
  inventoryUsages       InventoryUsage[]
  processes             Process[]
  invoicesPurchased     Invoice[]               @relation("InvoicePurchaser")
  paymentsMade          PaymentHistory[]        @relation("PaymentsMade")
  paymentsReceived      PaymentHistory[]        @relation("PaymentsReceived")
  inventoryTransactions InventoryTransaction[]
  seasons               Season[]                @relation("SeasonCreator") // YENİ: Sezon oluşturucu ilişkisi
  purchaseApprovals     PurchaseApproval[] // YENİ: Alış onayları

  // YENİ: Ekipman ilişkileri
  equipmentOwnerships EquipmentOwnership[] // Sahip olunan ekipmanlar
  equipmentUsages     EquipmentUsage[] // Kullanılan ekipmanlar
  fieldOwnerExpenses  FieldOwnerExpense[] // Tarla sahibi giderleri
}

// YENİ: Sezon Modeli
model Season {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String // Örn: "2023-2024 Kış Sezonu"
  startDate   DateTime
  endDate     DateTime
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // İlişkiler
  creator               User                   @relation("SeasonCreator", fields: [creatorId], references: [id])
  creatorId             String                 @db.ObjectId
  fields                Field[] // Tarlalar
  crops                 Crop[] // Ekinler
  purchases             Purchase[] // Alışlar
  inventoryTransactions InventoryTransaction[] // Envanter işlemleri
  processes             Process[] // İşlemler
  irrigationLogs        IrrigationLog[] // Sulama kayıtları

  // YENİ: Tarla giderleri
  fieldExpenses FieldExpense[]
}

// Tarla Modeli
model Field {
  id                String                  @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  location          String
  size              Float
  coordinates       String?
  status            String
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  seasonId          String?                 @db.ObjectId
  season            Season?                 @relation(fields: [seasonId], references: [id])
  owners            FieldOwnership[]        @relation("FieldOwnerAssignments") // İlişki ismi eklendi
  workerAssignments FieldWorkerAssignment[] @relation("FieldWorkerAssignments")
  crops             Crop[]
  // wells             Well[]                @relation("FieldWells") // Kaldırıldı: Explicit join model kullanılacak
  fieldWells        FieldWell[] // Eklendi: Explicit join model ilişkisi
  irrigationLogs    IrrigationLog[]
  processingLogs    ProcessingLog[]
  processCosts      ProcessCost[]           @relation("FieldProcessCosts") // İlişki ismi eklendi

  // İlişkiler
  // owners            FieldOwnership[]        @relation("FieldOwnerAssignments") // Tarla sahipleri
  // workerAssignments FieldWorkerAssignment[] @relation("FieldWorkerAssignments") // Tarla işçileri
  // crops             Crop[]
  // irrigationLogs    IrrigationLog[]
  // processingLogs    ProcessingLog[]
  // wells             Well[]                  // Tarla kuyuları - ilişki güncellendi
  inventoryUsages InventoryUsage[]
  processes       Process[]

  // YENİ: Tarla giderleri
  fieldExpenses FieldExpense[]
}

// Tarla Sahipliği Modeli
model FieldOwnership {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  percentage Float    @default(0) // YENİ: Sahiplik yüzdesi

  // İlişkiler
  field   Field  @relation("FieldOwnerAssignments", fields: [fieldId], references: [id])
  fieldId String @db.ObjectId
  user    User   @relation("UserOwnedFields", fields: [userId], references: [id])
  userId  String @db.ObjectId

  // YENİ: Tarla sahibi giderleri
  ownerExpenses FieldOwnerExpense[]

  @@unique([fieldId, userId])
}

// Tarla İşçi Atama Modeli
model FieldWorkerAssignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  field   Field  @relation("FieldWorkerAssignments", fields: [fieldId], references: [id])
  fieldId String @db.ObjectId
  user    User   @relation("UserAssignedFields", fields: [userId], references: [id])
  userId  String @db.ObjectId

  @@unique([fieldId, userId])
}

// YENİ: Field ve Well için Explicit Join Modeli
model FieldWell {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  field     Field    @relation(fields: [fieldId], references: [id])
  fieldId   String   @db.ObjectId
  well      Well     @relation(fields: [wellId], references: [id])
  wellId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([fieldId, wellId])
}

// Kuyu modeli - güncellendi
model Well {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  depth      Float
  capacity   Float
  status     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  // fields    Field[]  @relation("FieldWells") // Kaldırıldı: Explicit join model kullanılacak
  fieldWells FieldWell[] // Eklendi: Explicit join model ilişkisi

  // İlişkiler
  // field   Field?  @relation(fields: [fieldId], references: [id])
  // fieldId String? @db.ObjectId // Kaldırıldı
}

// Ürün modeli
model Crop {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  plantedDate DateTime
  harvestDate DateTime?
  status      CropStatus @default(GROWING)
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // YENİ: Sezon ilişkisi
  season   Season? @relation(fields: [seasonId], references: [id])
  seasonId String? @db.ObjectId

  // İlişkiler
  field   Field  @relation(fields: [fieldId], references: [id])
  fieldId String @db.ObjectId
}

// Sulama kaydı modeli
model IrrigationLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  amount    Float // Litre cinsinden
  duration  Float // Saat cinsinden
  method    String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // YENİ: Sezon ilişkisi
  season   Season? @relation(fields: [seasonId], references: [id])
  seasonId String? @db.ObjectId

  // İlişkiler
  field    Field  @relation(fields: [fieldId], references: [id])
  fieldId  String @db.ObjectId
  worker   User   @relation(fields: [workerId], references: [id]) // Yeni ilişki
  workerId String @db.ObjectId // Yeni alan
}

// Tarla işleme kaydı modeli
model ProcessingLog {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  processType ProcessType
  equipment   String?
  duration    Float // Saat cinsinden
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // İlişkiler
  field   Field  @relation(fields: [fieldId], references: [id])
  fieldId String @db.ObjectId
}

// Envanter Modeli
model Inventory {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  category      InventoryCategory
  totalQuantity Float
  unit          Unit              @default(KG) // String yerine Unit enum kullanacağız
  purchaseDate  DateTime?
  expiryDate    DateTime?
  status        InventoryStatus   @default(AVAILABLE)
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // İlişkiler
  ownerships            InventoryOwnership[]
  usages                InventoryUsage[]
  inventoryTransactions InventoryTransaction[] // YENİ
}

// Envanter Payları
model InventoryOwnership {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  inventory     Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId   String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  shareQuantity Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Alış Modeli
model Purchase {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  product           String
  category          ProductCategory @default(FERTILIZER) // YENİ: Ürün kategorisi
  quantity          Float
  unit              Unit            @default(KG) // Birim alanını ekleyelim
  unitPrice         Float
  totalCost         Float
  paymentMethod     PaymentMethod
  dueDate           DateTime? // Ödeme vadesi (ör: 3 ay sonra)
  description       String?
  createdAt         DateTime        @default(now())
  isTemplate        Boolean         @default(false) // YENİ: Şablon mu?
  templateName      String? // YENİ: Şablon adı
  approvalStatus    ApprovalStatus  @default(PENDING) // YENİ: Onay durumu
  approvalRequired  Boolean         @default(true) // YENİ: Onay gerekli mi?
  approvalThreshold Float           @default(1000) // YENİ: Onay eşiği (TL)

  // YENİ: Sezon ilişkisi
  season   Season? @relation(fields: [seasonId], references: [id])
  seasonId String? @db.ObjectId

  // İlişkiler
  contributors          PurchaseContributor[]
  debts                 Debt[]                 @relation("PurchaseDebts")
  invoices              Invoice[]              @relation("PurchaseInvoices")
  inventoryTransactions InventoryTransaction[] // YENİ
  approvals             PurchaseApproval[] // YENİ: Onaylar
}

// YENİ: Alış Onay Modeli
model PurchaseApproval {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  purchase   Purchase       @relation(fields: [purchaseId], references: [id])
  purchaseId String         @db.ObjectId
  approver   User           @relation(fields: [approverId], references: [id])
  approverId String         @db.ObjectId
  status     ApprovalStatus @default(PENDING)
  comment    String?
  approvedAt DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

// Alış Katılımcıları (Genişletilmiş)
model PurchaseContributor {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  purchase             Purchase  @relation(fields: [purchaseId], references: [id])
  purchaseId           String    @db.ObjectId
  user                 User      @relation(fields: [userId], references: [id])
  userId               String    @db.ObjectId
  sharePercentage      Float // Ortaklık yüzdesi (ör: 50.0)
  contribution         Float // Bu kullanıcının payı (ör: 26000 TL)
  expectedContribution Float // YENİ: Beklenen katkı (hesaplanmış)
  actualContribution   Float     @default(0) // YENİ: Gerçekte ödenen miktar
  remainingAmount      Float? // YENİ: Kalan borç miktarı
  hasPaid              Boolean   @default(false) // Ödeme yaptı mı?
  paymentDate          DateTime? // Ödeme tarihi
  isCreditor           Boolean // Kredi veren mi? (true ise borcun sahibi)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // İlişkiler
  paymentHistory PaymentHistory[] // YENİ
}

// YENİ: Ödeme Geçmişi Modeli
model PaymentHistory {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  paymentDate   DateTime
  paymentMethod PaymentMethod
  notes         String?
  createdAt     DateTime      @default(now())

  // İlişkiler
  debt          Debt?               @relation(fields: [debtId], references: [id])
  debtId        String?             @db.ObjectId
  contributor   PurchaseContributor @relation(fields: [contributorId], references: [id])
  contributorId String              @db.ObjectId
  payer         User                @relation("PaymentsMade", fields: [payerId], references: [id])
  payerId       String              @db.ObjectId
  receiver      User                @relation("PaymentsReceived", fields: [receiverId], references: [id])
  receiverId    String              @db.ObjectId
}

// YENİ: Envanter İşlemleri Modeli
model InventoryTransaction {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  type      TransactionType
  quantity  Float
  date      DateTime
  notes     String?
  createdAt DateTime        @default(now())

  // YENİ: Sezon ilişkisi
  season   Season? @relation(fields: [seasonId], references: [id])
  seasonId String? @db.ObjectId

  // İlişkiler
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String    @db.ObjectId
  purchase    Purchase? @relation(fields: [purchaseId], references: [id])
  purchaseId  String?   @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
}

// Borç Modeli (Genişletilmiş)
model Debt {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  amount           Float
  dueDate          DateTime
  status           DebtStatus @default(PENDING)
  description      String?
  createdAt        DateTime   @default(now())
  paymentDate      DateTime?
  reminderSent     Boolean    @default(false) // YENİ: Hatırlatma gönderildi mi?
  lastReminderDate DateTime? // YENİ: Son hatırlatma tarihi

  // Borç nedeni (alış, fatura vb.)
  reason String?

  // İlişkiler
  creditor       User             @relation("DebtsGiven", fields: [creditorId], references: [id])
  creditorId     String           @db.ObjectId
  debtor         User             @relation("DebtsTaken", fields: [debtorId], references: [id])
  debtorId       String           @db.ObjectId
  invoice        Invoice?         @relation("DebtInvoice", fields: [invoiceId], references: [id])
  invoiceId      String?          @db.ObjectId
  purchase       Purchase?        @relation("PurchaseDebts", fields: [purchaseId], references: [id])
  purchaseId     String?          @db.ObjectId
  paymentHistory PaymentHistory[] // YENİ
}

// Fatura Modeli
model Invoice {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  number      String        @unique
  amount      Float
  issueDate   DateTime
  dueDate     DateTime
  status      InvoiceStatus @default(PENDING)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // İlişkiler
  purchaser   User      @relation("InvoicePurchaser", fields: [purchaserId], references: [id])
  purchaserId String    @db.ObjectId
  debts       Debt[]    @relation("DebtInvoice")
  purchase    Purchase? @relation("PurchaseInvoices", fields: [purchaseId], references: [id])
  purchaseId  String?   @db.ObjectId
}

// Stok Kullanımı
model InventoryUsage {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  inventory    Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId  String    @db.ObjectId
  usedQuantity Float
  usageType    UsageType
  usedBy       User      @relation(fields: [usedById], references: [id])
  usedById     String    @db.ObjectId
  field        Field?    @relation(fields: [fieldId], references: [id])
  fieldId      String?   @db.ObjectId
  process      Process?  @relation(fields: [processId], references: [id])
  processId    String?   @db.ObjectId
  createdAt    DateTime  @default(now())
}

// İşlemler (Tarla, Sulama, vb.) - Güncellendi
model Process {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  type        ProcessType
  field       Field       @relation(fields: [fieldId], references: [id])
  fieldId     String      @db.ObjectId
  worker      User        @relation(fields: [workerId], references: [id])
  workerId    String      @db.ObjectId
  date        DateTime
  description String?

  // YENİ: Parçalı işleme alanları
  totalArea           Float // Tarlanın toplam alanı (dekar/dönüm)
  processedArea       Float // İşlenen alan (dekar/dönüm)
  processedPercentage Float // İşlenen alan yüzdesi (0-100)

  // YENİ: Sezon ilişkisi
  season   Season? @relation(fields: [seasonId], references: [id])
  seasonId String? @db.ObjectId

  // İlişkiler
  inventoryUsages InventoryUsage[]
  equipmentUsages EquipmentUsage[] // YENİ: Ekipman kullanımları
  processCosts    ProcessCost[] // YENİ: İşlem maliyetleri
  notifications   Notification[] // YENİ: Bildirimler

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Bildirimler - Güncellendi
model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // İlişkiler
  receiver   User    @relation("NotificationsReceived", fields: [receiverId], references: [id])
  receiverId String  @db.ObjectId
  sender     User?   @relation("NotificationsSent", fields: [senderId], references: [id])
  senderId   String? @db.ObjectId

  // YENİ: İşlem ilişkisi
  process   Process? @relation(fields: [processId], references: [id])
  processId String?  @db.ObjectId
}

// YENİ: Tarım Aleti/Ekipman Modeli
model Equipment {
  id                       String          @id @default(auto()) @map("_id") @db.ObjectId
  name                     String // Ekipman adı (Mibzer, Kültivatör, Diskaro vb.)
  type                     EquipmentType // Ekipman tipi (SEEDING, TILLAGE, SPRAYING vb.)
  fuelConsumptionPerDecare Float // Dekar başına yakıt tüketimi (litre)
  description              String? // Açıklama
  status                   EquipmentStatus @default(ACTIVE)
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt

  // İlişkiler
  ownerships   EquipmentOwnership[] // Ekipman sahiplikleri
  capabilities EquipmentCapability[] // Ekipman yetenekleri
  usages       EquipmentUsage[] // Ekipman kullanımları
}

// YENİ: Ekipman Sahipliği Modeli
model EquipmentOwnership {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  equipment           Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId         String    @db.ObjectId
  user                User      @relation(fields: [userId], references: [id])
  userId              String    @db.ObjectId
  ownershipPercentage Float // Sahiplik yüzdesi
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@unique([equipmentId, userId])
}

// YENİ: Ekipman Yetenek Modeli
model EquipmentCapability {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  equipment         Equipment         @relation(fields: [equipmentId], references: [id])
  equipmentId       String            @db.ObjectId
  inventoryCategory InventoryCategory // Hangi envanter kategorisini kullanabilir
  canUse            Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([equipmentId, inventoryCategory])
}

// YENİ: Ekipman Kullanım Modeli
model EquipmentUsage {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  process             Process   @relation(fields: [processId], references: [id])
  processId           String    @db.ObjectId
  equipment           Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId         String    @db.ObjectId
  user                User      @relation(fields: [userId], references: [id])
  userId              String    @db.ObjectId
  areaProcessed       Float // İşlenen alan (dekar/dönüm)
  processedPercentage Float // İşlenen alan yüzdesi (0-100)
  fuelConsumed        Float // Tüketilen yakıt (litre)
  unit                Unit // Birim (DECARE/DONUM)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

// YENİ: İşlem Maliyeti Modeli
model ProcessCost {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  process       Process  @relation(fields: [processId], references: [id])
  processId     String   @db.ObjectId
  laborCost     Float // İşçilik maliyeti
  equipmentCost Float // Ekipman kullanım maliyeti
  inventoryCost Float // Kullanılan envanter maliyeti
  fuelCost      Float // Yakıt maliyeti
  totalCost     Float // Toplam maliyet
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // İlişkiler
  field         Field               @relation("FieldProcessCosts", fields: [fieldId], references: [id]) // Karşı ilişki eklendi
  fieldId       String              @db.ObjectId // Karşı ilişki için alan eklendi
  fieldExpenses FieldExpense[] // Tarla giderleri
  ownerExpenses FieldOwnerExpense[] // Tarla sahibi giderleri
}

// YENİ: Tarla Gideri Modeli
model FieldExpense {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  field         Field       @relation(fields: [fieldId], references: [id])
  fieldId       String      @db.ObjectId
  season        Season      @relation(fields: [seasonId], references: [id])
  seasonId      String      @db.ObjectId
  processCost   ProcessCost @relation(fields: [processCostId], references: [id])
  processCostId String      @db.ObjectId
  totalCost     Float // Toplam maliyet
  periodStart   DateTime // Dönem başlangıcı
  periodEnd     DateTime // Dönem sonu
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// YENİ: Tarla Sahibi Gideri Modeli
model FieldOwnerExpense {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  fieldOwnership   FieldOwnership @relation(fields: [fieldOwnershipId], references: [id])
  fieldOwnershipId String         @db.ObjectId
  processCost      ProcessCost    @relation(fields: [processCostId], references: [id])
  processCostId    String         @db.ObjectId
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @db.ObjectId
  amount           Float // Tutar
  percentage       Float // Sahiplik yüzdesine göre hesaplanan oran
  periodStart      DateTime // Dönem başlangıcı
  periodEnd        DateTime // Dönem sonu
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

// Enum'lar
enum Role {
  ADMIN
  OWNER
  WORKER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum FieldStatus {
  ACTIVE
  FALLOW
  HARVESTED
}

enum WellStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum CropStatus {
  GROWING
  HARVESTED
  FAILED
}

enum InventoryCategory {
  SEED
  FERTILIZER
  PESTICIDE
  EQUIPMENT
  FUEL
  OTHER
}

// YENİ: Ürün Kategorisi Enum
enum ProductCategory {
  FERTILIZER // Gübre
  FEED // Besleme
  PESTICIDE // İlaç
  FUEL // Yakıt
  SEED // Tohum
  EQUIPMENT // Ekipman
  OTHER // Diğer
}

enum InventoryStatus {
  AVAILABLE
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  CREDIT
  BANK_TRANSFER // YENİ
}

enum DebtStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  PARTIALLY_PAID // YENİ
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum UsageType {
  IRRIGATION
  PROCESSING
  GENERAL
}

enum ProcessType {
  PLOWING
  SEEDING
  FERTILIZING
  PESTICIDE
  HARVESTING
  OTHER
}

enum NotificationType {
  SYSTEM
  IRRIGATION
  PROCESSING
  INVENTORY
  INVOICE
  DEBT
  APPROVAL // YENİ: Onay bildirimi
  REMINDER // YENİ: Hatırlatma bildirimi
  FIELD_PROCESSING // YENİ: Tarla işleme bildirimi
  OTHER
}

// YENİ: Envanter İşlem Tipleri
enum TransactionType {
  PURCHASE
  USAGE
  TRANSFER
  ADJUSTMENT
}

// YENİ: Onay Durumu Enum
enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// YENİ: Ekipman Tipi Enum
enum EquipmentType {
  SEEDING // Ekim (Mibzer)
  TILLAGE // Toprak işleme (Kültivatör, Diskaro)
  SPRAYING // İlaçlama
  FERTILIZING // Gübreleme
  HARVESTING // Hasat
  OTHER // Diğer
}

// YENİ: Ekipman Durumu Enum
enum EquipmentStatus {
  ACTIVE // Aktif
  MAINTENANCE // Bakımda
  INACTIVE // Pasif
}

enum Unit {
  KG
  TON
  LITRE
  ADET
  CUVAL
  BIDON
  PAKET
  METRE
  METREKARE
  DECARE // Dekar (1000 m²)
  DONUM // Dönüm (1000 m²) - Aynı anlama gelir
  HECTARE // Hektar (10000 m²)
  DIGER
}

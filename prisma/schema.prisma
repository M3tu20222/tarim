// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// Kullanıcı Modeli
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      Role     @default(WORKER)
  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  irrigationLogs        IrrigationLog[]
  ownedFields           FieldOwnership[]        @relation("UserOwnedFields") // Sahip olunan tarlalar
  assignedFields        FieldWorkerAssignment[] @relation("UserAssignedFields") // İşçi olarak atanan tarlalar
  inventoryOwnership    InventoryOwnership[]
  debtsAsCreditor       Debt[]                  @relation("DebtsGiven")
  debtsAsDebtor         Debt[]                  @relation("DebtsTaken")
  purchaseContributions PurchaseContributor[]
  receivedNotifications Notification[]          @relation("NotificationsReceived")
  sentNotifications     Notification[]          @relation("NotificationsSent")
  inventoryUsages       InventoryUsage[]
  processes             Process[]
  invoicesPurchased     Invoice[]               @relation("InvoicePurchaser")
  paymentsMade          PaymentHistory[]        @relation("PaymentsMade")
  paymentsReceived      PaymentHistory[]        @relation("PaymentsReceived")
  inventoryTransactions InventoryTransaction[]
  seasons               Season[]                @relation("SeasonCreator")
  purchaseApprovals     PurchaseApproval[]

  equipmentOwnerships EquipmentOwnership[]
  equipmentUsages     EquipmentUsage[]
  fieldOwnerExpenses  FieldOwnerExpense[]
  wellAssignments     WorkerWellAssignment[]

  notificationPreferences NotificationPreference?

  irrigationOwnerUsages          IrrigationOwnerUsage[]
  irrigationInventoryOwnerUsages IrrigationInventoryOwnerUsage[]
  irrigationOwnerSummaries       IrrigationOwnerSummary[]

  wellBillDistributions WellBillDistribution[]
}

// YENİ: Sezon Modeli
model Season {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  startDate   DateTime
  endDate     DateTime
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // İlişkiler
  creator               User                   @relation("SeasonCreator", fields: [creatorId], references: [id])
  creatorId             String                 @db.ObjectId
  fields                Field[]
  crops                 Crop[]
  purchases             Purchase[]
  inventoryTransactions InventoryTransaction[]
  processes             Process[]
  irrigationLogs        IrrigationLog[]

  fieldExpenses FieldExpense[]

  notifications Notification[] @relation("SeasonNotifications")
}

// Tarla Modeli
model Field {
  id                  String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  location            String
  size                Float
  coordinates         String?
  status              String
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  seasonId            String?                 @db.ObjectId
  season              Season?                 @relation(fields: [seasonId], references: [id])
  owners              FieldOwnership[]        @relation("FieldOwnerAssignments")
  workerAssignments   FieldWorkerAssignment[] @relation("FieldWorkerAssignments")
  crops               Crop[]
  fieldWells          FieldWell[]
  processingLogs      ProcessingLog[]
  processCosts        ProcessCost[]           @relation("FieldProcessCosts")
  inventoryUsages     InventoryUsage[]
  processes           Process[]
  fieldExpenses       FieldExpense[]
  notifications       Notification[]          @relation("FieldNotifications")
  irrigationFieldUsages IrrigationFieldUsage[]

  wellBillFieldDistributions WellBillFieldDistribution[]
  wellBillDistributions      WellBillDistribution[]
}

// Tarla Sahipliği Modeli
model FieldOwnership {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  percentage Float    @default(0)

  field   Field  @relation("FieldOwnerAssignments", fields: [fieldId], references: [id])
  fieldId String @db.ObjectId
  user    User   @relation("UserOwnedFields", fields: [userId], references: [id])
  userId  String @db.ObjectId

  ownerExpenses FieldOwnerExpense[]

  @@unique([fieldId, userId])
}

// Tarla İşçi Atama Modeli
model FieldWorkerAssignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  field   Field  @relation("FieldWorkerAssignments", fields: [fieldId], references: [id])
  fieldId String @db.ObjectId
  user    User   @relation("UserAssignedFields", fields: [userId], references: [id])
  userId  String @db.ObjectId

  @@unique([fieldId, userId])
}

model FieldWell {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  field     Field    @relation(fields: [fieldId], references: [id])
  fieldId   String   @db.ObjectId
  well      Well     @relation(fields: [wellId], references: [id])
  wellId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([fieldId, wellId])
}

model WorkerWellAssignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  worker   User   @relation(fields: [workerId], references: [id])
  workerId String @db.ObjectId
  well     Well   @relation(fields: [wellId], references: [id])
  wellId   String @db.ObjectId

  @@unique([workerId, wellId])
}

model Well {
  id                 String                 @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  depth              Float
  capacity           Float
  status             String
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  fieldWells         FieldWell[]
  notifications      Notification[]         @relation("WellNotifications")
  irrigationLogs     IrrigationLog[]
  wellBillingPeriods WellBillingPeriod[]
  workerAssignments  WorkerWellAssignment[]
}

model Crop {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  plantedDate DateTime
  harvestDate DateTime?
  status      CropStatus @default(GROWING)
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  season   Season? @relation(fields: [seasonId], references: [id])
  seasonId String? @db.ObjectId

  field   Field  @relation(fields: [fieldId], references: [id])
  fieldId String @db.ObjectId

  notifications Notification[] @relation("CropNotifications")
}

model ProcessingLog {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  processType ProcessType
  equipment   String?
  duration    Float
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  field   Field  @relation(fields: [fieldId], references: [id])
  fieldId String @db.ObjectId

  notifications Notification[] @relation("ProcessingLogNotifications")
}

model Inventory {
  id                      String                     @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  category                InventoryCategory
  totalQuantity           Float
  unit                    Unit                       @default(KG)
  totalStock              Float?                     @default(0)
  purchaseDate            DateTime?
  expiryDate              DateTime?
  status                  InventoryStatus            @default(AVAILABLE)
  costPrice               Float?
  notes                   String?
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
  ownerships              InventoryOwnership[]
  usages                  InventoryUsage[]
  inventoryTransactions   InventoryTransaction[]
  notifications           Notification[]             @relation("InventoryNotifications")
  irrigationInventoryUsages IrrigationInventoryUsage[]
}

model InventoryOwnership {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  inventory     Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId   String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  shareQuantity Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Purchase {
  id                     String                 @id @default(auto()) @map("_id") @db.ObjectId
  product                String
  category               ProductCategory        @default(FERTILIZER)
  quantity               Float
  unit                   Unit                   @default(KG)
  unitPrice              Float
  totalCost              Float
  paymentMethod          PaymentMethod
  creditorPaymentDueDate DateTime?
  dueDate                DateTime?
  description            String?
  createdAt              DateTime               @default(now())
  isTemplate             Boolean                @default(false)
  templateName           String?
  approvalStatus         ApprovalStatus         @default(PENDING)
  approvalRequired       Boolean                @default(true)
  approvalThreshold      Float                  @default(1000)
  seasonId               String?                @db.ObjectId
  season                 Season?                @relation(fields: [seasonId], references: [id])
  contributors           PurchaseContributor[]
  debts                  Debt[]                 @relation("PurchaseDebts")
  invoices               Invoice[]              @relation("PurchaseInvoices")
  inventoryTransactions  InventoryTransaction[]
  approvals              PurchaseApproval[]
  notifications          Notification[]         @relation("PurchaseNotifications")
}

model PurchaseApproval {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  purchase   Purchase       @relation(fields: [purchaseId], references: [id])
  purchaseId String         @db.ObjectId
  approver   User           @relation(fields: [approverId], references: [id])
  approverId String         @db.ObjectId
  status     ApprovalStatus @default(PENDING)
  comment    String?
  approvedAt DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  notifications Notification[] @relation("ApprovalNotifications")
}

model PurchaseContributor {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  purchase             Purchase         @relation(fields: [purchaseId], references: [id])
  purchaseId           String           @db.ObjectId
  user                 User             @relation(fields: [userId], references: [id])
  userId               String           @db.ObjectId
  sharePercentage      Float
  contribution         Float
  expectedContribution Float
  actualContribution   Float            @default(0)
  remainingAmount      Float?
  hasPaid              Boolean          @default(false)
  paymentDate          DateTime?
  isCreditor           Boolean
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  paymentHistory       PaymentHistory[]
  notifications        Notification[]   @relation("ContributorNotifications")
}

model PaymentHistory {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  paymentDate   DateTime
  paymentMethod PaymentMethod
  notes         String?
  createdAt     DateTime             @default(now())
  debt          Debt?                @relation(fields: [debtId], references: [id])
  debtId        String?              @db.ObjectId
  contributor   PurchaseContributor? @relation(fields: [contributorId], references: [id])
  contributorId String?              @db.ObjectId
  payer         User                 @relation("PaymentsMade", fields: [payerId], references: [id])
  payerId       String               @db.ObjectId
  receiver      User                 @relation("PaymentsReceived", fields: [receiverId], references: [id])
  receiverId    String               @db.ObjectId
  notifications Notification[]       @relation("PaymentNotifications")
}

model InventoryTransaction {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  type        TransactionType
  quantity    Float
  date        DateTime
  notes       String?
  createdAt   DateTime        @default(now())
  seasonId    String?         @db.ObjectId
  season      Season?         @relation(fields: [seasonId], references: [id])
  inventory   Inventory       @relation(fields: [inventoryId], references: [id])
  inventoryId String          @db.ObjectId
  purchase    Purchase?       @relation(fields: [purchaseId], references: [id])
  purchaseId  String?         @db.ObjectId
  user        User            @relation(fields: [userId], references: [id])
  userId      String          @db.ObjectId
  notifications Notification[]    @relation("TransactionNotifications")
}

model Debt {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  amount               Float
  dueDate              DateTime
  status               DebtStatus            @default(PENDING)
  description          String?
  createdAt            DateTime              @default(now())
  paymentDate          DateTime?
  reminderSent         Boolean               @default(false)
  lastReminderDate     DateTime?
  reason               String?
  creditor             User                  @relation("DebtsGiven", fields: [creditorId], references: [id])
  creditorId           String                @db.ObjectId
  debtor               User                  @relation("DebtsTaken", fields: [debtorId], references: [id])
  debtorId             String                @db.ObjectId
  invoice              Invoice?              @relation("DebtInvoice", fields: [invoiceId], references: [id])
  invoiceId            String?               @db.ObjectId
  purchase             Purchase?             @relation("PurchaseDebts", fields: [purchaseId], references: [id])
  purchaseId           String?               @db.ObjectId
  paymentHistory       PaymentHistory[]
  wellBillDistributions WellBillDistribution[]
  fieldOwnerExpenses    FieldOwnerExpense[]
  notifications        Notification[]        @relation("DebtNotifications")
}

model Invoice {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  number      String        @unique
  amount      Float
  issueDate   DateTime
  dueDate     DateTime
  status      InvoiceStatus @default(PENDING)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  purchaser   User         @relation("InvoicePurchaser", fields: [purchaserId], references: [id])
  purchaserId String       @db.ObjectId
  debts       Debt[]       @relation("DebtInvoice")
  purchase    Purchase?    @relation("PurchaseInvoices", fields: [purchaseId], references: [id])
  purchaseId  String?      @db.ObjectId
  notifications Notification[] @relation("InvoiceNotifications")
}

model InventoryUsage {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  inventory    Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId  String   @db.ObjectId
  usedQuantity Float
  usageType    UsageType
  usedBy       User     @relation(fields: [usedById], references: [id])
  usedById     String   @db.ObjectId
  field        Field?   @relation(fields: [fieldId], references: [id])
  fieldId      String?  @db.ObjectId
  process      Process? @relation(fields: [processId], references: [id])
  processId    String?  @db.ObjectId
  createdAt    DateTime @default(now())

  notifications Notification[] @relation("UsageNotifications")
}

model Process {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  type                  ProcessType
  status                ProcessStatus @default(DRAFT)
  field                 Field?        @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId               String?       @db.ObjectId
  worker                User          @relation(fields: [workerId], references: [id])
  workerId              String        @db.ObjectId
  date                  DateTime
  description           String?
  totalArea             Float
  processedArea         Float
  processedPercentage   Float
  seasonId              String?       @db.ObjectId
  season                Season?       @relation(fields: [seasonId], references: [id])
  inventoryUsages       InventoryUsage[]
  equipmentUsages       EquipmentUsage[]
  processCosts          ProcessCost[]
  notifications         Notification[]
  inventoryDistribution Json?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model Notification {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  message            String
  type               NotificationType
  priority           NotificationPriority @default(NORMAL)
  isRead             Boolean              @default(false)
  isArchived         Boolean              @default(false)
  link               String?
  expiresAt          DateTime?
  targetRoles        Role[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  receiver           User                 @relation("NotificationsReceived", fields: [receiverId], references: [id])
  receiverId         String               @db.ObjectId
  sender             User?                @relation("NotificationsSent", fields: [senderId], references: [id])
  senderId           String?              @db.ObjectId
  process            Process?             @relation(fields: [processId], references: [id])
  processId          String?              @db.ObjectId
  debt               Debt?                @relation("DebtNotifications", fields: [debtId], references: [id])
  debtId             String?              @db.ObjectId
  purchase           Purchase?            @relation("PurchaseNotifications", fields: [purchaseId], references: [id])
  purchaseId         String?              @db.ObjectId
  inventory          Inventory?           @relation("InventoryNotifications", fields: [inventoryId], references: [id])
  inventoryId        String?              @db.ObjectId
  irrigation         IrrigationLog?       @relation("IrrigationNotifications", fields: [irrigationId], references: [id])
  irrigationId       String?              @db.ObjectId
  field              Field?               @relation("FieldNotifications", fields: [fieldId], references: [id])
  fieldId            String?              @db.ObjectId
  season             Season?              @relation("SeasonNotifications", fields: [seasonId], references: [id])
  seasonId           String?              @db.ObjectId
  crop               Crop?                @relation("CropNotifications", fields: [cropId], references: [id])
  cropId             String?              @db.ObjectId
  well               Well?                @relation("WellNotifications", fields: [wellId], references: [id])
  wellId             String?              @db.ObjectId
  processingLog      ProcessingLog?       @relation("ProcessingLogNotifications", fields: [processingLogId], references: [id])
  processingLogId    String?              @db.ObjectId
  invoice            Invoice?             @relation("InvoiceNotifications", fields: [invoiceId], references: [id])
  invoiceId          String?              @db.ObjectId
  inventoryUsage     InventoryUsage?      @relation("UsageNotifications", fields: [inventoryUsageId], references: [id])
  inventoryUsageId   String?              @db.ObjectId
  transaction        InventoryTransaction? @relation("TransactionNotifications", fields: [transactionId], references: [id])
  transactionId      String?              @db.ObjectId
  payment            PaymentHistory?      @relation("PaymentNotifications", fields: [paymentId], references: [id])
  paymentId          String?              @db.ObjectId
  contributor        PurchaseContributor? @relation("ContributorNotifications", fields: [contributorId], references: [id])
  contributorId      String?              @db.ObjectId
  approval           PurchaseApproval?    @relation("ApprovalNotifications", fields: [approvalId], references: [id])
  approvalId         String?              @db.ObjectId
  equipment          Equipment?           @relation("EquipmentNotifications", fields: [equipmentId], references: [id])
  equipmentId        String?              @db.ObjectId
  equipmentUsage     EquipmentUsage?      @relation("EquipmentUsageNotifications", fields: [equipmentUsageId], references: [id])
  equipmentUsageId   String?              @db.ObjectId
  processCost        ProcessCost?         @relation("ProcessCostNotifications", fields: [processCostId], references: [id])
  processCostId      String?              @db.ObjectId
  fieldExpense       FieldExpense?        @relation("ExpenseNotifications", fields: [fieldExpenseId], references: [id])
  fieldExpenseId     String?              @db.ObjectId
  ownerExpense       FieldOwnerExpense?   @relation("OwnerExpenseNotifications", fields: [ownerExpenseId], references: [id])
  ownerExpenseId     String?              @db.ObjectId
}

model NotificationPreference {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  user                    User     @relation(fields: [userId], references: [id])
  userId                  String   @unique @db.ObjectId
  emailNotifications      Boolean  @default(true)
  pushNotifications       Boolean  @default(true)
  inAppNotifications      Boolean  @default(true)
  dailyDigest             Boolean  @default(false)
  notifyOnDebtReminders   Boolean  @default(true)
  notifyOnPayments        Boolean  @default(true)
  notifyOnProcessUpdates  Boolean  @default(true)
  notifyOnInventoryAlerts Boolean  @default(true)
  notifyOnApprovals       Boolean  @default(true)
  notifyOnIrrigation      Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model Equipment {
  id                       String                @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  type                     EquipmentType
  fuelConsumptionPerDecare Float
  description              String?
  status                   EquipmentStatus       @default(ACTIVE)
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  ownerships               EquipmentOwnership[]
  capabilities             EquipmentCapability[]
  usages                   EquipmentUsage[]
  notifications            Notification[]        @relation("EquipmentNotifications")
}

model EquipmentOwnership {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  equipment           Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId         String    @db.ObjectId
  user                User      @relation(fields: [userId], references: [id])
  userId              String    @db.ObjectId
  ownershipPercentage Float
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@unique([equipmentId, userId])
}

model EquipmentCapability {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  equipment         Equipment         @relation(fields: [equipmentId], references: [id])
  equipmentId       String            @db.ObjectId
  inventoryCategory InventoryCategory
  canUse            Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([equipmentId, inventoryCategory])
}

model EquipmentUsage {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  process             Process      @relation(fields: [processId], references: [id])
  processId           String       @db.ObjectId
  equipment           Equipment    @relation(fields: [equipmentId], references: [id])
  equipmentId         String       @db.ObjectId
  user                User         @relation(fields: [userId], references: [id])
  userId              String       @db.ObjectId
  areaProcessed       Float
  processedPercentage Float
  fuelConsumed        Float
  unit                Unit
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  notifications       Notification[] @relation("EquipmentUsageNotifications")
}

model ProcessCost {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  process       Process             @relation(fields: [processId], references: [id])
  processId     String              @db.ObjectId
  laborCost     Float
  equipmentCost Float
  inventoryCost Float
  fuelCost      Float
  totalCost     Float
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  field         Field               @relation("FieldProcessCosts", fields: [fieldId], references: [id])
  fieldId       String              @db.ObjectId
  ownerExpenses FieldOwnerExpense[]
  notifications Notification[]      @relation("ProcessCostNotifications")
}

model FieldExpense {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  field       Field        @relation(fields: [fieldId], references: [id])
  fieldId     String       @db.ObjectId
  season      Season       @relation(fields: [seasonId], references: [id])
  seasonId    String       @db.ObjectId
  totalCost   Float
  description String
  expenseDate DateTime
  sourceType  String
  sourceId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  notifications Notification[] @relation("ExpenseNotifications")
}

model FieldOwnerExpense {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  fieldOwnership   FieldOwnership @relation(fields: [fieldOwnershipId], references: [id])
  fieldOwnershipId String         @db.ObjectId
  processCost      ProcessCost    @relation(fields: [processCostId], references: [id])
  processCostId    String         @db.ObjectId
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @db.ObjectId
  amount           Float
  percentage       Float
  periodStart      DateTime
  periodEnd        DateTime
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  notifications    Notification[] @relation("OwnerExpenseNotifications")
  debt             Debt?          @relation(fields: [debtId], references: [id])
  debtId           String?        @db.ObjectId
}

// --------------------------------------------------
// YENİ EKLENEN SULAMA VE FATURALANDIRMA MODELLERİ
// --------------------------------------------------

model IrrigationLog {
  id              String                       @id @default(auto()) @map("_id") @db.ObjectId
  startDateTime   DateTime
  duration        Float
  wellId          String                       @db.ObjectId
  well            Well                         @relation(fields: [wellId], references: [id])
  notes           String?
  status          String                       @default("COMPLETED")
  createdBy       String                       @db.ObjectId
  user            User                         @relation(fields: [createdBy], references: [id])
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
  seasonId        String?                      @db.ObjectId
  season          Season?                      @relation(fields: [seasonId], references: [id])
  fieldUsages     IrrigationFieldUsage[]
  inventoryUsages IrrigationInventoryUsage[]
  billingUsages   WellBillingIrrigationUsage[]
  ownerSummaries  IrrigationOwnerSummary[]
  notifications   Notification[]               @relation("IrrigationNotifications")
}

model IrrigationFieldUsage {
  id                  String                 @id @default(auto()) @map("_id") @db.ObjectId
  irrigationLogId     String                 @db.ObjectId
  irrigationLog       IrrigationLog          @relation(fields: [irrigationLogId], references: [id], onDelete: Cascade)
  fieldId             String                 @db.ObjectId
  field               Field                  @relation(fields: [fieldId], references: [id])
  percentage          Float
  actualIrrigatedArea Float?
  createdAt           DateTime               @default(now())
  ownerUsages         IrrigationOwnerUsage[]
}

model IrrigationOwnerUsage {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  irrigationFieldUsageId String               @db.ObjectId
  irrigationFieldUsage   IrrigationFieldUsage @relation(fields: [irrigationFieldUsageId], references: [id])
  ownerId                String               @db.ObjectId
  owner                  User                 @relation(fields: [ownerId], references: [id])
  ownershipPercentage    Float
  usagePercentage        Float
  createdAt              DateTime             @default(now())
}

model IrrigationOwnerSummary {
  id                     String        @id @default(auto()) @map("_id") @db.ObjectId
  irrigationLogId        String        @db.ObjectId
  irrigationLog          IrrigationLog @relation(fields: [irrigationLogId], references: [id], onDelete: Cascade)
  ownerId                String        @db.ObjectId
  owner                  User          @relation(fields: [ownerId], references: [id])
  totalIrrigatedArea     Float
  totalAllocatedDuration Float
  createdAt              DateTime      @default(now())

  @@unique([irrigationLogId, ownerId])
}

model IrrigationInventoryUsage {
  id              String                        @id @default(auto()) @map("_id") @db.ObjectId
  irrigationLogId String                        @db.ObjectId
  irrigationLog   IrrigationLog                 @relation(fields: [irrigationLogId], references: [id], onDelete: Cascade)
  inventoryId     String                        @db.ObjectId
  inventory       Inventory                     @relation(fields: [inventoryId], references: [id])
  quantity        Float
  unitPrice       Float
  totalCost       Float
  createdAt       DateTime                      @default(now())
  ownerUsages     IrrigationInventoryOwnerUsage[]
}

model IrrigationInventoryOwnerUsage {
  id                         String                   @id @default(auto()) @map("_id") @db.ObjectId
  irrigationInventoryUsageId String                   @db.ObjectId
  irrigationInventoryUsage   IrrigationInventoryUsage @relation(fields: [irrigationInventoryUsageId], references: [id])
  ownerId                    String                   @db.ObjectId
  owner                      User                     @relation(fields: [ownerId], references: [id])
  percentage                 Float
  quantity                   Float
  cost                       Float
  createdAt                  DateTime                 @default(now())
}

model WellBillingPeriod {
  id                 String                       @id @default(auto()) @map("_id") @db.ObjectId
  wellId             String                       @db.ObjectId
  well               Well                         @relation(fields: [wellId], references: [id])
  startDate          DateTime
  endDate            DateTime
  paymentDueDate     DateTime
  totalAmount        Float
  totalUsage         Float?
  status             String                       @default("PENDING")
  createdAt          DateTime                     @default(now())
  irrigationUsages   WellBillingIrrigationUsage[]
  fieldDistributions WellBillFieldDistribution[]
  distributions      WellBillDistribution[]
}

model WellBillingIrrigationUsage {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  wellBillingPeriodId String            @db.ObjectId
  wellBillingPeriod   WellBillingPeriod @relation(fields: [wellBillingPeriodId], references: [id])
  irrigationLogId     String            @db.ObjectId
  irrigationLog       IrrigationLog     @relation(fields: [irrigationLogId], references: [id], onDelete: Cascade)
  duration            Float
  percentage          Float
  amount              Float
  createdAt           DateTime          @default(now())

  @@index([wellBillingPeriodId])
  @@index([irrigationLogId])
}

model WellBillFieldDistribution {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  wellBillingPeriod   WellBillingPeriod @relation(fields: [wellBillingPeriodId], references: [id], onDelete: Cascade)
  wellBillingPeriodId String            @db.ObjectId
  field               Field             @relation(fields: [fieldId], references: [id])
  fieldId             String            @db.ObjectId
  amount              Float
  createdAt           DateTime          @default(now())
}

model WellBillDistribution {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  wellBillingPeriod   WellBillingPeriod @relation(fields: [wellBillingPeriodId], references: [id], onDelete: Cascade)
  wellBillingPeriodId String            @db.ObjectId
  field               Field             @relation(fields: [fieldId], references: [id]) // Hangi tarladan gelen pay
  fieldId             String            @db.ObjectId
  owner               User              @relation(fields: [ownerId], references: [id])
  ownerId             String            @db.ObjectId
  amount              Float // Bu dağıtımdaki (tarla-sahip) payı
  basisDuration       Float // Bu payın hesaplanmasına temel olan süre (dakika)
  sharePercentage     Float // Toplam faturadaki yüzde payı
  basisArea           Float? // Bu payın hesaplanmasına temel olan alan (opsiyonel)
  basisWeight         Float? // Hata düzeltmesi için eklendi: Bu payın hesaplanmasına temel olan ağırlık (opsiyonel)
  debt                Debt?             @relation(fields: [debtId], references: [id])
  debtId              String?           @db.ObjectId
  createdAt           DateTime          @default(now())

  @@unique([wellBillingPeriodId, fieldId, ownerId])
  @@index([debtId])
}

// --------------------------------------------------
// ENUM TANIMLAMALARI
// --------------------------------------------------

enum Role {
  ADMIN
  OWNER
  WORKER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum FieldStatus {
  ACTIVE
  FALLOW
  HARVESTED
}

enum WellStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum CropStatus {
  GROWING
  HARVESTED
  FAILED
}

enum InventoryCategory {
  SEED
  FERTILIZER
  PESTICIDE
  EQUIPMENT
  FUEL
  OTHER
}

enum ProductCategory {
  FERTILIZER
  FEED
  PESTICIDE
  FUEL
  SEED
  EQUIPMENT
  OTHER
}

enum InventoryStatus {
  AVAILABLE
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  CREDIT
  BANK_TRANSFER
}

enum DebtStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  PARTIALLY_PAID
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum UsageType {
  IRRIGATION
  PROCESSING
  GENERAL
}

enum ProcessType {
  PLOWING
  SEEDING
  FERTILIZING
  PESTICIDE
  HARVESTING
  OTHER
}

enum ProcessStatus {
  DRAFT
  PENDING_INVENTORY_EQUIPMENT
  FINALIZED
  CANCELLED
}

enum NotificationType {
  SYSTEM
  IRRIGATION
  PROCESSING
  INVENTORY
  INVOICE
  DEBT
  APPROVAL
  REMINDER
  FIELD_PROCESSING
  PAYMENT_DUE
  PAYMENT_RECEIVED
  PROCESS_COMPLETED
  TASK_ASSIGNED
  INVENTORY_LOW
  DEBT_REMINDER
  IRRIGATION_SCHEDULED
  IRRIGATION_COMPLETED
  SYSTEM_ALERT
  TASK_UPDATED
  PROCESS_UPDATED
  OTHER
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum TransactionType {
  PURCHASE
  USAGE
  TRANSFER
  ADJUSTMENT
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum EquipmentType {
  SEEDING
  TILLAGE
  SPRAYING
  FERTILIZING
  HARVESTING
  OTHER
}

enum EquipmentStatus {
  ACTIVE
  MAINTENANCE
  INACTIVE
}

enum Unit {
  KG
  TON
  LITRE
  ADET
  CUVAL
  BIDON
  PAKET
  METRE
  METREKARE
  DECARE
  DONUM
  HECTARE
  DIGER
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// Kullanıcı Modeli
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      Role     @default(WORKER)
  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  irrigationLogs        IrrigationLog[]
  ownedFields           FieldOwnership[]        @relation("UserOwnedFields") // Sahip olunan tarlalar
  assignedFields        FieldWorkerAssignment[] @relation("UserAssignedFields") // İşçi olarak atanan tarlalar
  inventoryOwnership    InventoryOwnership[]
  debtsAsCreditor       Debt[]                  @relation("DebtsGiven")
  debtsAsDebtor         Debt[]                  @relation("DebtsTaken")
  purchaseContributions PurchaseContributor[]
  receivedNotifications Notification[]          @relation("NotificationsReceived")
  sentNotifications     Notification[]          @relation("NotificationsSent")
  inventoryUsages       InventoryUsage[]
  processes             Process[]
  invoicesPurchased     Invoice[]               @relation("InvoicePurchaser")
}

// Tarla Modeli
model Field {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  location    String
  size        Float // Dönüm cinsinden
  coordinates String? // Opsiyonel GPS koordinatları
  status      FieldStatus @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // İlişkiler
  owners            FieldOwnership[]        @relation("FieldOwnerAssignments") // Tarla sahipleri
  workerAssignments FieldWorkerAssignment[] @relation("FieldWorkerAssignments") // Tarla işçileri
  crops             Crop[]
  irrigationLogs    IrrigationLog[]
  processingLogs    ProcessingLog[]
  wells             Well[]
  inventoryUsages   InventoryUsage[]
  processes         Process[]
}

// Tarla Sahipliği Modeli
model FieldOwnership {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  field   Field  @relation("FieldOwnerAssignments", fields: [fieldId], references: [id])
  fieldId String @db.ObjectId
  user    User   @relation("UserOwnedFields", fields: [userId], references: [id])
  userId  String @db.ObjectId

  @@unique([fieldId, userId])
}

// Tarla İşçi Atama Modeli
model FieldWorkerAssignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  field   Field  @relation("FieldWorkerAssignments", fields: [fieldId], references: [id])
  fieldId String @db.ObjectId
  user    User   @relation("UserAssignedFields", fields: [userId], references: [id])
  userId  String @db.ObjectId

  @@unique([fieldId, userId])
}

// Diğer modeller (değişmeden kaldı)
model Well {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  depth     Float // Metre cinsinden
  capacity  Float // Litre/saat cinsinden
  status    WellStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  field   Field  @relation(fields: [fieldId], references: [id])
  fieldId String @db.ObjectId
}

// Ürün modeli
model Crop {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  plantedDate DateTime
  harvestDate DateTime?
  status      CropStatus @default(GROWING)
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // İlişkiler
  field   Field  @relation(fields: [fieldId], references: [id])
  fieldId String @db.ObjectId
}

// Sulama kaydı modeli
model IrrigationLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  amount    Float // Litre cinsinden
  duration  Float // Saat cinsinden
  method    String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  field     Field  @relation(fields: [fieldId], references: [id])
  fieldId   String @db.ObjectId
  worker    User   @relation(fields: [workerId], references: [id]) // Yeni ilişki
  workerId  String @db.ObjectId // Yeni alan
}

// Tarla işleme kaydı modeli
model ProcessingLog {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  processType ProcessType
  equipment   String?
  duration    Float // Saat cinsinden
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // İlişkiler
  field   Field  @relation(fields: [fieldId], references: [id])
  fieldId String @db.ObjectId
}

// Envanter Modeli
model Inventory {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  category      InventoryCategory
  totalQuantity Float
  unit          Unit              @default(KG) // String yerine Unit enum kullanacağız
  purchaseDate  DateTime?
  expiryDate    DateTime?
  status        InventoryStatus   @default(AVAILABLE)
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // İlişkiler
  ownerships InventoryOwnership[]
  usages     InventoryUsage[]
}

// Envanter Payları
model InventoryOwnership {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  inventory     Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId   String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  shareQuantity Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Alış Modeli
model Purchase {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  product       String
  quantity      Float
  unit          Unit          @default(KG) // Birim alanını ekleyelim
  unitPrice     Float
  totalCost     Float
  paymentMethod PaymentMethod
  dueDate       DateTime? // Ödeme vadesi (ör: 3 ay sonra)
  description   String?
  createdAt     DateTime      @default(now())

  // İlişkiler
  contributors PurchaseContributor[]
  debts        Debt[]                @relation("PurchaseDebts")
  invoices     Invoice[]             @relation("PurchaseInvoices")
}

// Alış Katılımcıları
model PurchaseContributor {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  purchase     Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId   String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  contribution Float // Bu kullanıcının payı (ör: 500 TL)
  isCreditor   Boolean // Kredi veren mi? (true ise borcun sahibi)
}

// Borç Modeli
model Debt {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  dueDate     DateTime
  status      DebtStatus @default(PENDING)
  description String?
  createdAt   DateTime   @default(now())
  paymentDate DateTime?

  // İlişkiler
  creditor   User      @relation("DebtsGiven", fields: [creditorId], references: [id])
  creditorId String    @db.ObjectId
  debtor     User      @relation("DebtsTaken", fields: [debtorId], references: [id])
  debtorId   String    @db.ObjectId
  invoice    Invoice?  @relation("DebtInvoice", fields: [invoiceId], references: [id])
  invoiceId  String?   @db.ObjectId
  purchase   Purchase? @relation("PurchaseDebts", fields: [purchaseId], references: [id])
  purchaseId String?   @db.ObjectId
}

// Fatura Modeli
model Invoice {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  number      String        @unique
  amount      Float
  issueDate   DateTime
  dueDate     DateTime
  status      InvoiceStatus @default(PENDING)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // İlişkiler
  purchaser   User      @relation("InvoicePurchaser", fields: [purchaserId], references: [id])
  purchaserId String    @db.ObjectId
  debts       Debt[]    @relation("DebtInvoice")
  purchase    Purchase? @relation("PurchaseInvoices", fields: [purchaseId], references: [id])
  purchaseId  String?   @db.ObjectId
}

// Stok Kullanımı
model InventoryUsage {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  inventory    Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId  String    @db.ObjectId
  usedQuantity Float
  usageType    UsageType
  usedBy       User      @relation(fields: [usedById], references: [id])
  usedById     String    @db.ObjectId
  field        Field?    @relation(fields: [fieldId], references: [id])
  fieldId      String?   @db.ObjectId
  process      Process?  @relation(fields: [processId], references: [id])
  processId    String?   @db.ObjectId
  createdAt    DateTime  @default(now())
}

// İşlemler (Tarla, Sulama, vb.)
model Process {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  type            ProcessType
  field           Field            @relation(fields: [fieldId], references: [id])
  fieldId         String           @db.ObjectId
  worker          User             @relation(fields: [workerId], references: [id])
  workerId        String           @db.ObjectId
  date            DateTime
  description     String?
  inventoryUsages InventoryUsage[]
}

// Bildirimler
model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // İlişkiler
  receiver   User    @relation("NotificationsReceived", fields: [receiverId], references: [id])
  receiverId String  @db.ObjectId
  sender     User?   @relation("NotificationsSent", fields: [senderId], references: [id])
  senderId   String? @db.ObjectId
}

// Enum'lar
enum Role {
  ADMIN
  OWNER
  WORKER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum FieldStatus {
  ACTIVE
  FALLOW
  HARVESTED
}

enum WellStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum CropStatus {
  GROWING
  HARVESTED
  FAILED
}

enum InventoryCategory {
  SEED
  FERTILIZER
  PESTICIDE
  EQUIPMENT
  FUEL
  OTHER
}

enum InventoryStatus {
  AVAILABLE
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  CREDIT
}

enum DebtStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum UsageType {
  IRRIGATION
  PROCESSING
  GENERAL
}

enum ProcessType {
  PLOWING
  SEEDING
  FERTILIZING
  PESTICIDE
  HARVESTING
  OTHER
}

enum NotificationType {
  SYSTEM
  IRRIGATION
  PROCESSING
  INVENTORY
  INVOICE
  DEBT
  OTHER
}

// Enum'lar bölümüne aşağıdaki enum'u ekleyelim
enum Unit {
  KG
  TON
  LITRE
  ADET
  CUVAL
  BIDON
  PAKET
  METRE
  METREKARE
  DIGER
}

